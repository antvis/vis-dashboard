{"version":3,"sources":["webpack:///./src/components/base/code-loading.tsx","webpack:///./src/components/base/page-loading.tsx","webpack:///./src/components/Seo.tsx","webpack:///./src/components/RedirectIndex.tsx","webpack:///./src/pages/index.tsx"],"names":["CodeLoading","className","viewBox","id","x1","x2","y1","y2","offset","stopColor","cx","cy","r","stroke","points","x","y","width","height","PageLoading","useEffect","oldOverflow","document","body","style","overflow","SEO","description","lang","meta","title","titleSuffix","site","useStaticQuery","metaDescription","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","RedirectIndex","navigate","query","render","data","Seo","Page","noLayout"],"mappings":"2IA6CeA,G,UA1Ce,kBAC5B,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBACb,6BACE,yBAAKA,UAAU,UACb,yBAAKC,QAAQ,aACX,8BACE,oCACEC,GAAG,WACHC,GAAG,QACHC,GAAG,WACHC,GAAG,UACHC,GAAG,WAEH,0BAAMC,OAAO,KAAKC,UAAU,YAC5B,0BAAMD,OAAO,MAAMC,UAAU,YAC7B,0BAAMD,OAAO,MAAMC,UAAU,YAC7B,0BAAMD,OAAO,MAAMC,UAAU,YAC7B,0BAAMD,OAAO,MAAMC,UAAU,cAGjC,4BAAQN,GAAG,OAAOO,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,OAAO,qBAGpD,yBAAKZ,UAAU,mBACb,yBAAKC,QAAQ,aACX,6BAASY,OAAO,kBAAkBD,OAAO,qBAG7C,yBAAKZ,UAAU,UACb,yBAAKC,QAAQ,aACX,0BAAMa,EAAE,IAAIC,EAAE,IAAIC,MAAM,KAAKC,OAAO,KAAKL,OAAO,qBAGpD,yBAAKZ,UAAU,gBACb,+CClBKkB,IAjBe,WAU5B,OATAC,qBAAU,WAER,IAAMC,EAAcC,SAASC,KAAKC,MAAMC,SAExC,OADAH,SAASC,KAAKC,MAAMC,SAAW,SACxB,WACLH,SAASC,KAAKC,MAAMC,SAAWJ,KAEhC,IAGD,yBAAKG,MAAO,CAAEN,OAAQ,UACpB,kBAAC,EAAD,S,0FCIAQ,EAA0B,SAAC,GAM3B,IALJC,EAKI,EALJA,YAKI,IAJJC,YAII,MAJG,GAIH,MAHJC,YAGI,MAHG,GAGH,EAFJC,EAEI,EAFJA,MACAC,EACI,EADJA,YAEQC,EAASC,yBAAe,cAAxBD,KAaFE,EAAkBP,GAAeK,EAAKG,aAAaR,YAEzD,OACE,kBAACS,EAAA,EAAD,CACEC,eAAgB,CACdT,QAEFE,MAAOA,EACPQ,cAAa,SAAUP,GAAeC,EAAKG,aAAaL,OACxDD,KAAM,CACJ,CACEU,KAAM,cACNC,QAASN,GAEX,CACEO,SAAU,WACVD,QAASV,GAEX,CACEW,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,gBACNC,QAASV,GAEX,CACES,KAAM,sBACNC,QAASN,IAEXQ,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAM,KACNC,KAAM,GACNF,YAAa,IAGAD,Q,YC1CAkB,EAzCO,WACpBxB,qBAAU,WACRyB,mBAAS,UACR,IAsBH,OACE,kBAAC,cAAD,CACEC,MAAK,aASLC,OA/BgB,SAACC,GAOnB,MAIIA,EAHFhB,KACEG,aAAgBL,aAFpB,MAE4B,GAF5B,EAKA,OACE,oCACE,kBAACmB,EAAD,CAAKnB,MAAOA,GAAS,WACrB,kBAAC,IAAD,WCrBFoB,G,UAAyC,kBAAM,kBAAC,EAAD,QAErDA,EAAKC,UAAW,EAEDD,a","file":"component---src-pages-index-tsx-e9a23d89cfbb06ba5c63.js","sourcesContent":["import React from 'react';\nimport './code-loading.less';\n\nconst CodeLoading: React.FC = () => (\n  <div className=\"full\">\n    <div className=\"code-loading\">\n      <div>\n        <div className=\"loader\">\n          <svg viewBox=\"0 0 80 80\">\n            <defs>\n              <linearGradient\n                id=\"gradient\"\n                x1=\".004%\"\n                x2=\"100.131%\"\n                y1=\"49.993%\"\n                y2=\"49.993%\"\n              >\n                <stop offset=\"0%\" stopColor=\"#6500FF\" />\n                <stop offset=\"16%\" stopColor=\"#6A09FF\" />\n                <stop offset=\"43%\" stopColor=\"#7623FF\" />\n                <stop offset=\"77%\" stopColor=\"#8A4CFF\" />\n                <stop offset=\"99%\" stopColor=\"#996BFF\" />\n              </linearGradient>\n            </defs>\n            <circle id=\"test\" cx=\"40\" cy=\"40\" r=\"32\" stroke=\"url(#gradient)\" />\n          </svg>\n        </div>\n        <div className=\"loader triangle\">\n          <svg viewBox=\"0 0 86 80\">\n            <polygon points=\"43 8 79 72 7 72\" stroke=\"url(#gradient)\" />\n          </svg>\n        </div>\n        <div className=\"loader\">\n          <svg viewBox=\"0 0 80 80\">\n            <rect x=\"8\" y=\"8\" width=\"64\" height=\"64\" stroke=\"url(#gradient)\" />\n          </svg>\n        </div>\n        <div className=\"loading-text\">\n          <p>Loading...</p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default CodeLoading;\n","import React, { useEffect } from 'react';\nimport CodeLoading from './code-loading';\n\nconst PageLoading: React.FC = () => {\n  useEffect(() => {\n    // 为了确保遮罩层下，没有滚动事件\n    const oldOverflow = document.body.style.overflow;\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = oldOverflow;\n    };\n  }, []);\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <CodeLoading />\n    </div>\n  );\n};\n\nexport default PageLoading;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface SEOProps {\n  description?: string;\n  lang?: string;\n  meta?: any[];\n  title?: string;\n  titleSuffix?: string;\n}\n\nconst SEO: React.FC<SEOProps> = ({\n  description,\n  lang = '',\n  meta = [],\n  title,\n  titleSuffix,\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${titleSuffix || site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n};\n\nSEO.defaultProps = {\n  lang: `zh`,\n  meta: [],\n  description: ``,\n};\n\nexport default SEO;\n","import React, { useEffect } from 'react';\nimport { navigate, graphql, StaticQuery } from 'gatsby';\nimport Seo from './Seo';\nimport PageLoading from './base/page-loading';\n\nconst RedirectIndex = () => {\n  useEffect(() => {\n    navigate('home');\n  }, []);\n\n  const renderIndex = (data: {\n    site: {\n      siteMetadata: {\n        title?: string;\n      };\n    };\n  }) => {\n    const {\n      site: {\n        siteMetadata: { title = '' },\n      },\n    } = data;\n    return (\n      <>\n        <Seo title={title || 'G2Plot'} />\n        <PageLoading />\n      </>\n    );\n  };\n\n  return (\n    <StaticQuery\n      query={graphql`\n        query HeadingQuery {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `}\n      render={renderIndex}\n    />\n  );\n};\n\nexport default RedirectIndex;\n","import React from 'react';\nimport RedirectIndex from '../components/RedirectIndex';\nimport './index.less';\n\nconst Page: React.FC & { noLayout: boolean } = () => <RedirectIndex />;\n\nPage.noLayout = false;\n\nexport default Page;\n"],"sourceRoot":""}