{"componentChunkName":"component---src-templates-example-tsx","path":"/gallery/pizza","result":{"pageContext":{"source":"// @ts-nocheck\nimport { Chart, registerShape } from '@antv/g2';\nimport DataSet from '@antv/data-set';\n\nconst transpose = true;\nconst femaleColor = 'rgba(178,76,46,1)';\nconst maleColor = 'rgba(74,188,84,1)';\nconst averageColor = 'rgba(68, 67,39, 1)';\nconst healthyColor = 'rgba(58,57,39, .45)';\nconst unhealthyColor = 'rgba(75, 109, 84, .45)';\nconst unhealthyFoods = [\n  'Ham(火腿)',\n  'Chicken',\n  'Pepperoni(意大利辣香肠)',\n  'Beef',\n  'Pork',\n  'Tuna(金枪鱼)',\n];\n\n// 自定义 shape, 支持图片形式的气泡\nregisterShape('interval', 'range-interval', {\n  draw(cfg, container) {\n    const { points, data } = cfg;\n    let path = [];\n    path.push(['M', points[0].x, points[0].y]);\n    path.push(['L', points[1].x, points[1].y]);\n    path.push(['L', points[2].x, points[2].y]);\n    path.push(['L', points[3].x, points[3].y]);\n    path.push('Z');\n    path = this.parsePath(path); // 将 0 - 1 转化为画布坐标\n    const group = container.addGroup();\n    if (transpose) {\n      const height = path[0][2] - path[2][2];\n      const width = path[1][1] - path[0][1];\n      const x = path[0][1];\n      const y = path[0][2];\n      const radius = Math.min(width, height) / 2;\n      group.addShape('rect', {\n        attrs: {\n          x, // 矩形起始点为左上角\n          y: y - height,\n          width,\n          height,\n          fill: unhealthyFoods.includes(data.type)\n            ? unhealthyColor\n            : healthyColor,\n          radius,\n        },\n      });\n      group.addShape('circle', {\n        attrs: {\n          x: x + width / 2, // 矩形起始点为左上角\n          y: y - height + radius,\n          fill: averageColor,\n          r: radius * 0.65,\n        },\n      });\n      group.addShape('circle', {\n        name: Number(data.female) === data.range[0] ? 'Female' : 'Male',\n        attrs: {\n          x: x + radius, // 矩形起始点为左上角\n          y: y - height + radius,\n          fill: Number(data.female) === data.range[0] ? femaleColor : maleColor,\n          r: radius * 0.65,\n        },\n      });\n      group.addShape('circle', {\n        name: Number(data.female) === data.range[1] ? 'Female' : 'Male',\n        attrs: {\n          x: x + width - radius, // 矩形起始点为左上角\n          y: y - height + radius,\n          fill: Number(data.female) === data.range[1] ? femaleColor : maleColor,\n          r: radius * 0.65,\n        },\n      });\n    } else {\n      const width = path[2][1] - path[1][1];\n      const height = path[0][2] - path[1][2];\n      // 矩形起始点为左上角\n      const x = path[1][1];\n      const y = path[1][2];\n      const radius = Math.min(width, height) / 2;\n      group.addShape('rect', {\n        attrs: {\n          x,\n          y,\n          width,\n          height,\n          fill: unhealthyFoods.includes(data.type)\n            ? unhealthyColor\n            : healthyColor,\n          radius: Math.min(width, height) / 2,\n        },\n      });\n      // 中间 circle\n      group.addShape('circle', {\n        attrs: {\n          x: x + width / 2, // 矩形起始点为左上角\n          y: y + height / 2,\n          fill: averageColor,\n          r: radius * 0.65,\n        },\n      });\n      // 底部 circle\n      group.addShape('circle', {\n        name: Number(data.female) === data.range[0] ? 'Female' : 'Male',\n        attrs: {\n          x: x + radius, // 矩形起始点为左上角\n          y: y + height - radius,\n          fill: Number(data.female) === data.range[0] ? femaleColor : maleColor,\n          r: radius * 0.65,\n        },\n      });\n      // 顶部 circle\n      group.addShape('circle', {\n        name: Number(data.female) === data.range[0] ? 'Female' : 'Male',\n        attrs: {\n          x: x + width - radius, // 矩形起始点为左上角\n          y: y + radius,\n          fill: Number(data.female) === data.range[1] ? femaleColor : maleColor,\n          r: radius * 0.65,\n        },\n      });\n    }\n\n    return group;\n  },\n});\n\nfetch('https://gw.alipayobjects.com/os/antfincdn/Qr8VKD5zY8/pizza-data.json')\n  .then(data => data.json())\n  .then(data => {\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n      height: 500,\n      theme: {\n        background: 'rgb(29,29,29)',\n      },\n      appendPadding: [18, 0, 0, 8],\n    });\n    const ds = new DataSet();\n    const dv = ds.createView().source(data);\n\n    dv.transform({\n      type: 'map',\n      callback(row) {\n        const high = Math.max(row.female, row.male);\n        const low = Math.min(row.female, row.male);\n        // 加工数据后返回新的一行，默认返回行数据本身\n        row.range = [low, high];\n        return row;\n      },\n    });\n\n    const view0 = chart.createView({\n      region: {\n        start: { x: 0, y: 0 },\n        end: { x: 1, y: 0.25 },\n      },\n    });\n\n    const imageWidth = 100;\n    const imageX =\n      chart.canvas.get('el').getBoundingClientRect().width / 2 - imageWidth / 2;\n\n    const imageShape = view0.foregroundGroup.addShape('image', {\n      attrs: {\n        x: imageX,\n        y: 0,\n        width: imageWidth,\n        height: 150,\n        img:\n          'https://gw.alipayobjects.com/zos/antfincdn/5WAWk6mp%24%26/pizza-image.jpeg',\n        rotate: Math.PI / 2,\n        style: {},\n      },\n    });\n\n    imageShape.rotateAtPoint(\n      imageX + imageWidth / 2,\n      imageShape.getBBox().y + imageShape.getBBox().height / 2,\n      -Math.PI / 2\n    );\n\n    const view = chart.createView({\n      region: {\n        start: { x: 0, y: 0.25 },\n        end: { x: 1, y: 1 },\n      },\n      appendPadding: [0, 20, 0, 0],\n    });\n    view.data(dv.rows);\n\n    if (transpose) {\n      view.coordinate().transpose();\n    }\n\n    view.tooltip({\n      showMarkers: false,\n    });\n\n    view.axis('type', {\n      label: {\n        autoRotate: transpose ? false : true,\n      },\n    });\n    view.axis('range', {\n      label: {\n        formatter: text => `${text}%`,\n      },\n      grid: {\n        line: {\n          style: {\n            lineDash: [4, 4],\n            strokeOpacity: 0.05,\n          },\n        },\n      },\n    });\n\n    view\n      .interval()\n      .position('type*range')\n      .shape('range-interval')\n      .animate({\n        appear: {\n          animation: 'fade-in',\n        },\n      });\n\n    chart.tooltip({\n      shared: true,\n      showMarkers: false,\n      customContent: (title, items) => {\n        let content = '';\n        const markerStyle =\n          'display:inline-block;border-radius:6px;width:6px;height:6px;margin-right:8px;';\n        items.forEach(item => {\n          content += `<div style=\"margin:4px 0;\"><span style=\"${markerStyle}background:${femaleColor}\"></span>female: ${item.data.female}</div>`;\n          content += `<div style=\"margin:4px 0;\"><span style=\"${markerStyle}background:${maleColor}\"></span>male: ${item.data.male}</div>`;\n          content += `<div style=\"margin:4px 0;\"><span style=\"${markerStyle}background:${averageColor}\"></span>average: ${item.data.average}</div>`;\n        });\n        return `<div class=\"g2-tooltip\" style=\"padding:8px;\">\n        <div style=\"font-size:16px;margin:8px 0;\">${title}</div>\n        ${content}\n      </duv>`;\n      },\n    });\n\n    view.legend({\n      custom: true,\n      items: [\n        {\n          value: 'Female',\n          name: 'Female',\n          marker: { symbol: 'circle', style: { fill: femaleColor, r: 5 } },\n        },\n        {\n          value: 'Male',\n          name: 'Male',\n          marker: { symbol: 'circle', style: { fill: maleColor, r: 5 } },\n        },\n        {\n          value: 'average',\n          name: 'Average',\n          marker: { symbol: 'circle', style: { fill: averageColor, r: 5 } },\n        },\n        {\n          value: 'high-calories',\n          name: 'High calories',\n          marker: {\n            symbol: 'circle',\n            style: { fill: unhealthyColor, r: 5 },\n          },\n        },\n        {\n          value: 'low-calories',\n          name: 'Low calories',\n          marker: {\n            symbol: 'square',\n            style: { fill: healthyColor, r: 5 },\n          },\n        },\n      ],\n    });\n\n    view.interaction('element-active');\n    view.interaction('active-region');\n    view.render();\n    chart.render();\n\n    const shapes = view.geometries[0].getShapes().reduce((result, shape) => {\n      // @ts-ignore\n      return [...result, ...shape.getChildren()];\n    }, []);\n\n    view.on('legend-item:click', e => {\n      const delegateObject = e.gEvent.delegateObject;\n      shapes.forEach(shape => {\n        if (shape.get('name') === delegateObject.item.value) {\n          shape.animate(\n            {\n              opacity: delegateObject.item.unchecked ? 1 : 0,\n            },\n            200\n          );\n        }\n      });\n    });\n\n    let size = 0;\n    view.on('legend-item:mouseenter', e => {\n      const delegateObject = e.gEvent.delegateObject;\n      shapes.forEach(shape => {\n        if (shape.get('name') === delegateObject.item.value) {\n          size = shape.attr('r');\n          shape.animate(\n            {\n              r: 6,\n            },\n            200\n          );\n        }\n      });\n    });\n\n    view.on('legend-item:mouseleave', e => {\n      const delegateObject = e.gEvent.delegateObject;\n      shapes.forEach(shape => {\n        if (shape.get('name') === delegateObject.item.value) {\n          shape.animate({ r: size }, 200);\n        }\n      });\n    });\n  });\n"}},"staticQueryHashes":["2870822922","3272957548"]}