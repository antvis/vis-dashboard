{"componentChunkName":"component---src-templates-example-tsx","path":"/gallery/waffle","result":{"pageContext":{"source":"import { Scatter, G2 } from '@antv/g2plot';\n\nfunction registerShape(shapeName, func) {\n  G2.registerShape('point', shapeName, {\n    draw(cfg, container) {\n      const { x, y, size, color, style } = cfg;\n      const opacity = style?.opacity || 1;\n      return container.addShape('path', {\n        attrs: {\n          path: func?.(x, y, size * 2, size * 2),\n          fill: opacity < 1 ? `l(270): 0:${color} ${opacity}:#fff` : color,\n          lineWidth: 0.2,\n          stroke: color,\n        },\n      });\n    },\n    getMarker(markerCfg) {\n      const { color } = markerCfg;\n      return {\n        symbol: (x, y, r) => func?.(x, y, 10, 10),\n        style: {\n          fill: color,\n          stroke: null,\n        },\n      };\n    },\n  });\n}\n\nregisterShape('heart', (x, y, width, height) => {\n  const r = width / 4;\n  const dx = x - width / 2;\n  const dy = y - height / 2;\n  return [\n    ['M', dx, dy + r * 2],\n    ['A', r, r, 0, 0, 1, x, dy + r],\n    ['A', r, r, 0, 0, 1, dx + width, dy + r * 2],\n    ['L', x, dy + height],\n    ['L', dx, dy + r * 2],\n    ['Z'],\n  ];\n});\nregisterShape('star', (x, y, width, height) => {\n  const path = [];\n  const w = Math.min(width, height);\n\n  for (let i = 0; i < 5; i++) {\n    path.push([\n      i === 0 ? 'M' : 'L',\n      (Math.cos(((18 + i * 72) * Math.PI) / 180) * w) / 2 + x,\n      (-Math.sin(((18 + i * 72) * Math.PI) / 180) * w) / 2 + y,\n    ]);\n    path.push([\n      'L',\n      (Math.cos(((54 + i * 72) * Math.PI) / 180) * w) / 4 + x,\n      (-Math.sin(((54 + i * 72) * Math.PI) / 180) * w) / 4 + y,\n    ]);\n  }\n  path.push(['Z']);\n  return path;\n});\nregisterShape('pin', (x, y, width, height) => {\n  const w = (width * 2) / 3;\n  const h = Math.max(w, height);\n  const r = w / 2;\n\n  // attrs of the upper circle\n  const cx = x;\n  const cy = r + y - h / 2;\n  const theta = Math.asin(r / ((h - r) * 0.85));\n  const dy = Math.sin(theta) * r;\n  const dx = Math.cos(theta) * r;\n\n  // the start point of the path\n  const x0 = cx - dx;\n  const y0 = cy + dy;\n\n  // control point\n  const cpX = x;\n  const cpY = cy + r / Math.sin(theta);\n\n  return [\n    ['M', x0, y0],\n    ['A', r, r, 0, 1, 1, x0 + dx * 2, y0],\n    ['Q', cpX, cpY, x, y + h / 2],\n    ['Q', cpX, cpY, x0, y0],\n    ['Z'],\n  ];\n});\nconst data = [\n  { name: 'pin', value: 10 },\n  { name: 'diamond', value: 60 },\n  { name: 'heart', value: 40 },\n  { name: 'star', value: 50 },\n];\n\nconst box = document.getElementById('container').getBoundingClientRect();\nconst ratio = box.width / box.height;\n\nconst rows = 12;\nconst cols = rows * ratio;\n\nconst waffleData = [];\nconst step = data.reduce((a, b) => a + b.value, 0) / (rows * cols);\n\nlet idx = 0;\nlet weight = 0;\nfor (let col = 0; col < cols + 1; col++) {\n  for (let row = 0; row < rows; row++) {\n    if (idx > data.length) {\n      break;\n    }\n    waffleData.push({\n      ...data[idx],\n      y: `${row}`,\n      x: `${col}`,\n      percentage: Math.min((data[idx]?.value - weight) / step, 1),\n    });\n    weight += step;\n    if (weight >= data[idx]?.value) {\n      idx += 1;\n      // 重置\n      weight = 0;\n    }\n  }\n}\n\nconst plot = new Scatter('container', {\n  data: waffleData,\n  xField: 'x',\n  yField: 'y',\n  colorField: 'name',\n  shapeField: 'name',\n  size: 12,\n  tooltip: { showCrosshairs: false, fields: ['name', 'value', 'percentage'] },\n  xAxis: false,\n  yAxis: false,\n  // @ts-ignore\n  rawFields: ['percentage'],\n  shape: ({ name }) => {\n    return name;\n  }, // 根据具体的字段指定 shape\n  pointStyle: ({ name, percentage }) => {\n    return {\n      lineWidth: name ? 1 : 0,\n      opacity: Number.isNaN(percentage) ? 0 : Math.max(percentage, 0.2),\n    };\n  },\n  interactions: [{ type: 'element-active' }],\n});\nplot.render();\n"}},"staticQueryHashes":["2870822922","3272957548"]}