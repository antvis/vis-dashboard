{"componentChunkName":"component---src-templates-example-tsx","path":"/gallery/emoji-waffle","result":{"pageContext":{"source":"import { Scatter, G2 } from '@antv/g2plot';\nimport { DataView } from '@antv/data-set';\nimport { each } from 'lodash';\nimport { message } from 'antd';\n\n// ref: https://stackoverflow.com/a/46118025\nexport function copyToClipboard(text) {\n  var dummy = document.createElement('input');\n  document.body.appendChild(dummy);\n  dummy.setAttribute('value', text);\n  dummy.select();\n  const result = document.execCommand('copy');\n  document.body.removeChild(dummy);\n  if (result) {\n    message.success(`复制 ${text} 成功`);\n  }\n}\n\nfetch('https://gw.alipayobjects.com/os/antfincdn/RREr%24bnyJf/emoji-data.json')\n  .then(data => data.json())\n  .then(result => {\n    const dv = new DataView().source(result);\n    dv.transform({\n      type: 'partition',\n      groupBy: ['emoji'], // 以year字段进行分组\n    });\n    const data = [];\n    each(dv.rows, values => {\n      const v = values[0];\n      data.push({ ...v, value: values.length, name: v.d, emojiCode: v.d });\n    });\n\n    function registeEmoji(name, emojiCode) {\n      G2.registerShape('point', name, {\n        draw(cfg, container) {\n          const { x, y, size, color: fill } = cfg;\n          const fontSize = size * 2;\n          return container.addShape('text', {\n            attrs: {\n              ...cfg?.style,\n              text: String.fromCodePoint(parseInt(emojiCode, 16)),\n              // @ts-ignore\n              x: x - fontSize / 2,\n              // @ts-ignore\n              y: y + fontSize / 2 + 1,\n              fill,\n              fontSize,\n            },\n          });\n        },\n        getMarker() {\n          return { symbol: 'circle', style: { lineWidth: 0, r: 0 } };\n        },\n      });\n    }\n\n    data.forEach(d => {\n      if (d.emojiCode) {\n        registeEmoji(d.name, d.emojiCode);\n      }\n    });\n\n    const box = document.getElementById('container').getBoundingClientRect();\n    const ratio = box.width / box.height;\n\n    const rows = 10;\n    const cols = rows * ratio;\n\n    const waffleData = [];\n    const step = data.reduce((a, b) => a + b.value, 0) / (rows * cols);\n\n    let idx = 0;\n    let weight = 0;\n    for (let col = 0; col < cols + 1; col++) {\n      for (let row = 0; row < rows; row++) {\n        if (idx > data.length) {\n          break;\n        }\n        waffleData.push({\n          ...data[idx],\n          y: `${row}`,\n          x: `${col}`,\n          percentage: Math.min((data[idx]?.value - weight) / step, 1),\n        });\n        weight += step;\n        if (weight >= data[idx]?.value) {\n          idx += 1;\n          // 重置\n          weight = 0;\n        }\n      }\n    }\n\n    const plot = new Scatter('container', {\n      data: waffleData,\n      xField: 'x',\n      yField: 'y',\n      colorField: 'name',\n      shapeField: 'name',\n      size: ({ percentage }) => Math.max(percentage, 0.5) * 10,\n      tooltip: { showCrosshairs: false, fields: ['name', 'value'] },\n      xAxis: false,\n      yAxis: false,\n      rawFields: ['percentage'],\n      shape: ({ name }) => {\n        return name;\n      }, // 根据具体的字段指定 shape\n      pointStyle: ({ name }) => {\n        return {\n          lineWidth: name ? 1 : 0,\n        };\n      },\n      legend: {\n        marker: {\n          spacing: 0,\n        },\n        itemName: {\n          formatter: (text, item, idx) => {\n            return data[idx].emojiCode\n              ? String.fromCodePoint(parseInt(data[idx].emojiCode, 16))\n              : '';\n          },\n        },\n        itemValue: {\n          formatter: text => {\n            return text;\n          },\n          style: {\n            fill: 'rgba(255,255,255,0.65)',\n          },\n        },\n        // @ts-ignore\n        itemStates: {\n          unchecked: {\n            nameStyle: {\n              fillOpacity: 0.45,\n            },\n            valueStyle: {\n              fillOpacity: 0.45,\n            },\n          },\n        },\n      },\n      state: {\n        active: {\n          style: {\n            shadowColor: 'rgba(100, 100,100, 0.25)',\n            shadowBlur: 15,\n          },\n        },\n      },\n      interactions: [\n        {\n          type: 'element-active',\n          cfg: {\n            start: [\n              {\n                trigger: 'element:mouseenter',\n                action: ['cursor:pointer', 'element-active:active'],\n              },\n            ],\n            end: [\n              {\n                trigger: 'element:mouseleave',\n                action: ['cursor:default', 'element-active:reset'],\n              },\n            ],\n          },\n        },\n      ],\n    });\n    plot.render();\n\n    plot.on('element:click', event => {\n      const emoji = event.data?.data?.emoji;\n      copyToClipboard(emoji);\n    });\n  });\n"}},"staticQueryHashes":["3272957548"]}