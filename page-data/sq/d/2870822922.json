{"data":{"site":{"siteMetadata":{"extraLib":"declare module '@antv/g2plot'{\n          import { Chart } from '@antv/g2';\r\nimport EE from '@antv/event-emitter';\r\nimport { Element as Element_2 } from '@antv/g2';\r\nimport * as G2 from '@antv/g2';\r\nimport { Geometry } from '@antv/g2';\r\nimport { PathCommand } from '@antv/g-base';\r\nimport { ScaleConfig } from '@antv/g2';\r\nimport { ShapeAttrs } from '@antv/g-base';\r\nimport { ShapeAttrs as ShapeAttrs_2 } from '@antv/g2';\r\nimport { Types } from '@antv/g2';\r\nimport { View } from '@antv/g2';\r\n\r\n/**\r\n * schema 转 G2 的适配器基类\r\n * 使用 纯函数的方式，这里只是类型定义\r\n */\r\nexport declare type Adaptor<O> = (params: Params<O>) => void;\r\n\r\nexport declare const adaptors: {\r\n    scale: typeof scale;\r\n    legend: typeof legend;\r\n    tooltip: typeof tooltip;\r\n    annotation: typeof annotation;\r\n    interaction: typeof interaction;\r\n    theme: typeof theme;\r\n    animation: typeof animation;\r\n};\r\n\r\n/**\r\n * 动画\r\n * @param params\r\n */\r\ndeclare function animation<O extends Pick<Options, 'animation'>>(params: Params<O>): Params<O>;\r\n\r\ndeclare type Animation_2 = false | Types.AnimateOption;\r\n\r\ndeclare type Annotation = Types.ArcOption | Types.ImageOption | Types.LineOption | Types.TextOption | Types.RegionOption | Types.RegionFilterOption | Types.DataMarkerOption | Types.DataRegionOption | Types.ShapeAnnotationOption | Types.HtmlAnnotationOption;\r\n\r\n/**\r\n * annotation 配置\r\n * @param params\r\n */\r\ndeclare function annotation(annotationOptions?: Options['annotations']): <O extends Pick<Options, \"annotations\">>(params: Params<O>) => Params<O>;\r\n\r\n/** annotation position */\r\nexport declare type AnnotationPosition = Types.AnnotationPosition;\r\n\r\nexport declare class Area extends Plot<AreaOptions> {\r\n    /**\r\n     * 获取 面积图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<AreaOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 面积图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<AreaOptions>;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: AreaOptions['data']): void;\r\n    /**\r\n     * 获取 面积图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<AreaOptions>;\r\n}\r\n\r\n/**\r\n * area geometry 的配置处理\r\n * @param params\r\n */\r\nexport declare function area<O extends AreaGeometryOptions>(params: Params<O>): Params<O>;\r\n\r\nexport declare interface AreaGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** area 图形的样式设置 */\r\n    readonly area?: MappingOptions;\r\n}\r\n\r\n/** 面积图的配置类型定义 */\r\nexport declare interface AreaOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否堆积 */\r\n    readonly isStack?: boolean;\r\n    /** 是否百分比 */\r\n    readonly isPercent?: boolean;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 面积图形样式 */\r\n    readonly areaStyle?: StyleAttr;\r\n    /** 面积中折线的样式 */\r\n    readonly line?: LineGeometryOptions['line'];\r\n    /** 面积图数据点图形样式 */\r\n    readonly point?: PointGeometryOptions['point'] & Pick<PointGeometryOptions, 'state'>;\r\n    /** 积图是否从 0 基准线开始填充 */\r\n    readonly startOnZero?: boolean;\r\n}\r\n\r\nexport declare type Axis = false | (Types.AxisCfg & Omit<Meta, 'values' | 'formatter'>);\r\n\r\n/**\r\n * 条形图\r\n */\r\nexport declare class Bar extends Plot<BarOptions> {\r\n    /**\r\n     * 获取 条形图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<BarOptions>;\r\n    /** 图表类型 */\r\n    readonly type: string;\r\n    /**\r\n     * @override\r\n     */\r\n    changeData(data: BarOptions['data']): void;\r\n    /**\r\n     * 获取 条形图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<BarOptions>;\r\n    /**\r\n     * 获取 条形图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<BarOptions>;\r\n}\r\n\r\nexport declare interface BarOptions extends Omit<ColumnOptions, 'columnStyle' | 'columnWidthRatio' | 'minColumnWidth' | 'maxColumnWidth'> {\r\n    readonly barStyle?: ColumnOptions['columnStyle'];\r\n    readonly barWidthRatio?: ColumnOptions['columnWidthRatio'];\r\n    /** 条形图最小宽度（像素） */\r\n    readonly minBarWidth?: ColumnOptions['minColumnWidth'];\r\n    /** 条形图最大宽度（像素） */\r\n    readonly maxBarWidth?: ColumnOptions['maxColumnWidth'];\r\n    /** 条形图柱子的背景 */\r\n    readonly barBackground?: ColumnOptions['columnBackground'];\r\n}\r\n\r\n/** 位置 */\r\nexport declare type BBox = {\r\n    readonly x: number;\r\n    readonly y: number;\r\n    readonly width: number;\r\n    readonly height: number;\r\n};\r\n\r\nexport declare class BidirectionalBar extends Plot<BidirectionalBarOptions> {\r\n    /**\r\n     * 获取 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<BidirectionalBarOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     */\r\n    changeData(data?: any[]): void;\r\n    protected getDefaultOptions(): Partial<BidirectionalBarOptions>;\r\n    /**\r\n     * 获取对称条形图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<BidirectionalBarOptions>;\r\n}\r\n\r\nexport declare interface BidirectionalBarOptions extends Omit<Options, 'yAxis' | 'yField'> {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴映射字段 */\r\n    readonly yField: [string, string];\r\n    /** yAxis 为多个 key 为 yField 里面的 2 个字段 */\r\n    readonly yAxis?: false | {\r\n        [key: string]: Axis;\r\n    };\r\n    /** 柱状图宽度占比 [0-1] */\r\n    readonly widthRatio?: number;\r\n    /** 柱子样式配置，可选 */\r\n    readonly barStyle?: StyleAttr;\r\n    /** layout 方向选择，默认水平 horizontal*/\r\n    readonly layout?: 'horizontal' | 'vertical';\r\n}\r\n\r\nexport declare class Box extends Plot<BoxOptions> {\r\n    /**\r\n     * 获取 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<BoxOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 获取 箱型图 默认配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<BoxOptions>;\r\n    /**\r\n     * 获取 箱型图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<BoxOptions>;\r\n}\r\n\r\nexport declare interface BoxOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴映射 box range [low, q1, median, q3, high] 五个字段 or 一个数组字段 */\r\n    readonly yField: string | [string?, string?, string?, string?, string?];\r\n    /** 箱型样式配置，可选 */\r\n    readonly boxStyle?: StyleAttr;\r\n    /** 分组拆分字段，默认是分组情况，颜色作为视觉通道 */\r\n    readonly groupField?: string;\r\n    /** 异常值字段 */\r\n    readonly outliersField?: string;\r\n    /** 异常值样式 */\r\n    readonly outliersStyle?: StyleAttr;\r\n}\r\n\r\nexport declare class Bullet extends Plot<BulletOptions> {\r\n    /**\r\n     * 获取 子弹图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<BulletOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    changeData(data: any): void;\r\n    /**\r\n     * 获取子弹图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<BulletOptions>;\r\n    /**\r\n     * 获取 子弹图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<BulletOptions>;\r\n}\r\n\r\ndeclare type BulletAttr<T> = {\r\n    measure?: T;\r\n    target?: T;\r\n    range?: T;\r\n};\r\n\r\nexport declare interface BulletOptions extends Omit<Options, 'color' | 'label' | 'style'> {\r\n    /** 弹图标题，用于区分不同的类型 */\r\n    readonly xField?: string;\r\n    /** 使用数据条的长度，表示实际数值字段，所表示值为 number[]*/\r\n    readonly measureField: string;\r\n    /** 使用背景色条的长度，表示区间范围 [20,50,100], 所表示值为 number[]*/\r\n    readonly rangeField: string;\r\n    /** 使用测量标记的刻度轴位置，表示目标值,所表示值为数值 */\r\n    readonly targetField: string;\r\n    /** label 包含了 measure,target,range */\r\n    readonly label?: BulletAttr<GeometryLabelAttr | false>;\r\n    /** size 包含了 measure,target,range */\r\n    readonly size?: BulletAttr<SizeAttr>;\r\n    /** color 包含了 measure,target,range */\r\n    readonly color?: BulletAttr<ColorAttr>;\r\n    /** bulletStyle 包含了 measure,target,range */\r\n    readonly bulletStyle?: BulletAttr<StyleAttr>;\r\n    /** layout 方向选择*/\r\n    layout?: 'horizontal' | 'vertical';\r\n}\r\n\r\n/**\r\n *  弦图 Chord\r\n */\r\nexport declare class Chord extends Plot<ChordOptions> {\r\n    /**\r\n     * 获取 面积图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<ChordOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    protected getDefaultOptions(): Partial<ChordOptions>;\r\n    /**\r\n     * 获取适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<ChordOptions>;\r\n}\r\n\r\n/** 配置类型定义 */\r\nexport declare interface ChordOptions extends Omit<Options, 'xField' | 'yField' | 'xAxis' | 'yAxis'> {\r\n    /**\r\n     * 来源字段\r\n     */\r\n    readonly sourceField: string;\r\n    /**\r\n     * 去向字段\r\n     */\r\n    readonly targetField: string;\r\n    /**\r\n     * 权重字段\r\n     */\r\n    readonly weightField: string;\r\n    /**\r\n     * 数据\r\n     */\r\n    readonly data: Data;\r\n    /**\r\n     * 节点间距比例，参考画布的宽度，默认值为 0.1，取值为[0, 1)\r\n     */\r\n    readonly nodePaddingRatio?: number;\r\n    /**\r\n     * 节点的厚度，默认值为0.05，取值为(0, 1)\r\n     */\r\n    readonly nodeWidthRatio?: number;\r\n    /**\r\n     * 节点排序方式，默认为空\r\n     */\r\n    readonly nodeSort?: (a: Datum, b: Datum) => number;\r\n    /**\r\n     * 节点样式\r\n     */\r\n    readonly nodeStyle?: StyleAttr;\r\n    /**\r\n     * 边样式\r\n     */\r\n    readonly edgeStyle?: StyleAttr;\r\n}\r\n\r\n/** 颜色映射 */\r\nexport declare type ColorAttr = string | string[] | ((datum: Datum) => string);\r\n\r\n/**\r\n * 柱形图\r\n */\r\nexport declare class Column extends Plot<ColumnOptions> {\r\n    /**\r\n     * 获取 柱形图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<ColumnOptions>;\r\n    /** 图表类型 */\r\n    readonly type: string;\r\n    /**\r\n     * @override\r\n     */\r\n    changeData(data: ColumnOptions['data']): void;\r\n    /**\r\n     * 获取 柱形图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<ColumnOptions>;\r\n    /**\r\n     * 获取 柱形图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<ColumnOptions>;\r\n}\r\n\r\nexport declare interface ColumnOptions extends Options, OptionWithConversionTag, OptionWithConnectedArea, PartialIntervalGeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴字段 */\r\n    readonly yField: string;\r\n    /** 拆分字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否分组柱形图 */\r\n    readonly isGroup?: boolean;\r\n    /** 是否是区间柱状图 */\r\n    readonly isRange?: boolean;\r\n    /** 是否是百分比柱状图 */\r\n    readonly isPercent?: boolean;\r\n    /** 是否堆积柱状图 */\r\n    readonly isStack?: boolean;\r\n    /** 柱状图宽度占比 [0-1] */\r\n    readonly columnWidthRatio?: number;\r\n    /** 分组中柱子之间的间距 [0-1]，仅对分组柱状图适用 */\r\n    readonly marginRatio?: number;\r\n    /** 柱状图最小宽度（像素） */\r\n    readonly minColumnWidth?: number;\r\n    /** 柱状图最大宽度（像素） */\r\n    readonly maxColumnWidth?: number;\r\n    /** 柱状图柱子的背景 */\r\n    readonly columnBackground?: {\r\n        style?: ShapeAttrs_2;\r\n    };\r\n    /** 柱子样式配置，可选 */\r\n    readonly columnStyle?: StyleAttr;\r\n    /** 分组字段，优先级高于 seriesField , isGroup: true 时会根据 groupField 进行分组。*/\r\n    readonly groupField?: string;\r\n}\r\n\r\ndeclare type CommonGeometryOption = {\r\n    readonly geometry?: string;\r\n    readonly label?: Options['label'];\r\n    readonly color?: Options['color'];\r\n    readonly isGroup?: boolean;\r\n    readonly groupField?: string;\r\n};\r\n\r\ndeclare interface ConnectedAreaOptions {\r\n    /** 触发方式, 默认 hover */\r\n    trigger?: 'hover' | 'click';\r\n}\r\n\r\n/** 转化率组件配置选项 */\r\ndeclare interface ConversionTagOptions {\r\n    /** tag 高度 */\r\n    size?: number;\r\n    /** tag 对柱子间距 */\r\n    spacing?: number;\r\n    /** tag 距离轴线距离 */\r\n    offset?: number;\r\n    /** 箭头形状配置 */\r\n    arrow?: {\r\n        /** 箭头宽度 */\r\n        headSize?: number;\r\n        /** 箭头样式 */\r\n        style?: ShapeAttrs_2;\r\n    } | false;\r\n    /** 文本配置 */\r\n    text?: {\r\n        /** 文字大小 */\r\n        size?: number;\r\n        /** 文字样式 */\r\n        style?: ShapeAttrs_2;\r\n        /** 文本格式化 */\r\n        formatter?: (prev: number, next: number) => string;\r\n    } | false;\r\n}\r\n\r\ndeclare type CSSStyle = Omit<Partial<CSSStyleDeclaration>, 'opacity' | 'fontWeight' | 'lineHeight'> & {\r\n    opacity?: number;\r\n    fontWeight?: string | number;\r\n    lineHeight?: string | number;\r\n};\r\n\r\n/** 一个数据序列 */\r\nexport declare type Data = Datum[];\r\n\r\n/** 一条数据记录 */\r\nexport declare type Datum = Record<string, any>;\r\n\r\ndeclare type DrillDownCfg = {\r\n    /** Enable or disable the drillDown interaction */\r\n    enabled?: boolean;\r\n    /** 面包屑相关配置 */\r\n    breadCrumb?: {\r\n        /** 位置 */\r\n        position: 'top-left' | 'bottom-left';\r\n        /** 根文本 */\r\n        rootText?: string;\r\n        /** 分割线文本 */\r\n        dividerText?: string;\r\n        /** 字体样式 */\r\n        textStyle?: ShapeAttrs_2;\r\n        /** 激活的字体样式 */\r\n        activeTextStyle?: ShapeAttrs_2;\r\n    };\r\n};\r\n\r\nexport declare class DualAxes extends Plot<DualAxesOptions> {\r\n    /** 图表类型: 双轴图 */\r\n    type: string;\r\n    /**\r\n     * 获取 双轴图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<DualAxesOptions>;\r\n    /**\r\n     * 获取双轴图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<DualAxesOptions>;\r\n    /**\r\n     * 设置状态\r\n     * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\r\n     * @param conditions 条件，支持数组\r\n     * @param status 是否激活，默认 true\r\n     */\r\n    setState(type: StateName, condition: StateCondition, status?: boolean): void;\r\n    /**\r\n     * 获取状态\r\n     */\r\n    getStates(): StateObject[];\r\n}\r\n\r\nexport declare type DualAxesOptions = Omit<Options, 'data' | 'yAxis' | 'color' | 'annotations'> & {\r\n    /**\r\n     * 具体的数据，左右两边的数据\r\n     */\r\n    readonly data: Array<Record<string, any>[]>;\r\n    /**\r\n     * 双轴图的 x 字段，x 字段名称需要保持一致\r\n     */\r\n    readonly xField: string;\r\n    /**\r\n     * 双轴图左右 y 字段，需要不一致\r\n     */\r\n    readonly yField: string[];\r\n    /**\r\n     * 左右两边的 yAxis 配置，使用 object 的方式，key 为 y 字段名，或者数组分别表示左右\r\n     */\r\n    readonly yAxis?: Options['yAxis'][] | Record<string, Options['yAxis']>;\r\n    /**\r\n     * 左右两边的图形配置\r\n     */\r\n    readonly geometryOptions?: GeometryOption[];\r\n    /**\r\n     * 左右两边的 annotation 配置, 同时支持数组和object 两种形式，以防出现 field 相同无法设置的情况\r\n     */\r\n    readonly annotations?: Options['annotations'][] | Record<string, Options['annotations']>;\r\n};\r\n\r\nexport declare class Facet extends Plot<FacetOptions> {\r\n    /**\r\n     * 获取 分面图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<FacetOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 分面图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<FacetOptions<\"circle\" | \"rect\" | \"mirror\" | \"list\" | \"matrix\" | \"tree\">>;\r\n    /**\r\n     * 获取 分面图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<FacetOptions>;\r\n}\r\n\r\ndeclare type FacetCfg = Types.MirrorCfg & Types.RectCfg & Types.TreeCfg & Types.ListCfg & Types.CircleCfg & Types.MatrixCfg;\r\n\r\n/**\r\n * facetData map\r\n */\r\ndeclare type FacetDataMap = {\r\n    /** rect 类型分面配置 */\r\n    readonly rect: Types.RectData;\r\n    /** mirror 类型分面配置 */\r\n    readonly mirror: Types.MirrorData;\r\n    /** list 类型分面配置 */\r\n    readonly list: Types.ListData;\r\n    /** matrix 类型分面配置 */\r\n    readonly matrix: Types.MatrixData;\r\n    /** circle 类型分面配置 */\r\n    readonly circle: Types.CircleData;\r\n    /** tree 类型分面配置 */\r\n    readonly tree: Types.TreeData;\r\n};\r\n\r\n/** 分面图的配置类型定义 */\r\nexport declare interface FacetOptions<T extends keyof Types.FacetCfgMap = keyof Types.FacetCfgMap> extends Options, FacetCfg {\r\n    /**\r\n     * 分面类型，G2 内置了六种分面: rect、list、circle、tree、mirror 和 matrix\r\n     */\r\n    readonly type: T;\r\n    /**\r\n     * 数据划分维度。\r\n     */\r\n    readonly fields: string[];\r\n    /**\r\n     * 分面数据\r\n     */\r\n    readonly data: Data;\r\n    /**\r\n     * 每个分面 view 中的具体绘图表现\r\n     * 回调的方式\r\n     */\r\n    readonly eachView: (innerView: View, facet?: FacetDataMap[T]) => IView_2 | IPlot_2;\r\n    /**\r\n     * 是否展示分面标题\r\n     */\r\n    readonly showTitle?: boolean;\r\n    /**\r\n     * 3. facet 中对应的 meta 字段配置\r\n     */\r\n    readonly meta?: Record<string, Meta>;\r\n    /**\r\n     * 4. 坐标系的配置，每一个 view 具有相同的坐标系\r\n     */\r\n    readonly coordinate?: Types.CoordinateOption;\r\n    /**\r\n     * 5. 轴配置\r\n     */\r\n    readonly axes?: false | Record<string, Axis>;\r\n    /**\r\n     * 6. tooltip 配置\r\n     */\r\n    readonly tooltip?: Tooltip;\r\n    /**\r\n     * 7. 图例配置\r\n     */\r\n    readonly legend?: Legend;\r\n    /**\r\n     * 8. 图例配置\r\n     */\r\n    readonly interactions?: Interaction[];\r\n}\r\n\r\n/**\r\n * 类似 lodash.flow 的方法\r\n * @param flows\r\n */\r\nexport declare function flow<P>(...flows: FlowFunction<P>[]): FlowFunction<P>;\r\n\r\ndeclare type FlowFunction<P> = (param: P) => P;\r\n\r\ndeclare type FontWeight = ShapeStyle['fontWeight'];\r\n\r\nexport declare class Funnel extends Plot<FunnelOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    static getDefaultOptions(): Partial<FunnelOptions>;\r\n    /**\r\n     * 获取 漏斗图 默认配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<FunnelOptions>;\r\n    /**\r\n     * 获取 漏斗图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<FunnelOptions>;\r\n}\r\n\r\nexport declare const FUNNEL_CONVERSATION_FIELD = \"$$conversion$$\";\r\n\r\nexport declare interface FunnelOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段: 漏斗图将根据此字段转置为分面漏斗图 */\r\n    readonly seriesField?: string;\r\n    /** 对比字段：漏斗图将根据此字段转置为对比漏斗图  */\r\n    readonly compareField?: string;\r\n    /** 是否转置 */\r\n    readonly isTransposed?: boolean;\r\n    /** 是否是动态高度 */\r\n    readonly dynamicHeight?: boolean;\r\n    /** maxSize: 最大宽度，0-1 之间 */\r\n    readonly maxSize?: number;\r\n    /** minSize: 最大宽度，0-1 之间 */\r\n    readonly minSize?: number;\r\n    /** 转化率信息 */\r\n    readonly conversionTag?: false | {\r\n        readonly offsetX: number;\r\n        readonly offsetY: number;\r\n        readonly style: TextStyle;\r\n        readonly formatter: string | ((datum?: Datum, data?: Data) => string);\r\n    };\r\n}\r\nexport { G2 }\r\n\r\n/**\r\n * 仪表盘\r\n */\r\nexport declare class Gauge extends Plot<GaugeOptions> {\r\n    /**\r\n     * 获取 仪表盘 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<GaugeOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 更新数据\r\n     * @param percent\r\n     */\r\n    changeData(percent: number): void;\r\n    /**\r\n     * 获取默认配置\r\n     * 供 base 使用\r\n     */\r\n    protected getDefaultOptions(): Partial<GaugeOptions>;\r\n    /**\r\n     * 获取适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<GaugeOptions>;\r\n}\r\n\r\n/** 仪表盘配置类型定义 */\r\nexport declare interface GaugeOptions extends Omit<Options, 'data' | 'tooltip' | 'legend' | 'xAxis' | 'yAxis' | 'xField' | 'yField' | 'color'> {\r\n    /** 指标的比例 0 ~ 1 */\r\n    readonly percent: number;\r\n    /** 外弧度 0 ~ 1 */\r\n    readonly radius?: number;\r\n    /** 内弧度 0 ~ 1 */\r\n    readonly innerRadius?: number;\r\n    /** 弧度起始 */\r\n    readonly startAngle?: number;\r\n    /** 弧度结束 */\r\n    readonly endAngle?: number;\r\n    /** 辅助的 range 组件 */\r\n    readonly range?: Range_2;\r\n    /** 坐标轴配置 */\r\n    readonly axis?: Axis;\r\n    /** 指针的配置 */\r\n    readonly indicator?: false | Indicator;\r\n    /** 统计文本 */\r\n    readonly statistic?: Statistic;\r\n    /** 仪表盘样式 */\r\n    readonly gaugeStyle?: StyleAttr;\r\n    /** 仪表盘类型, 可选项: 'meter', default 为空 */\r\n    readonly type?: string;\r\n    /** 当仪表盘类型 = 'meter' 生效 */\r\n    readonly meter?: {\r\n        /** 仪表盘总步数, default: 50 */\r\n        readonly steps?: number;\r\n        /** step 与 gap 的宽度占比, default: 0.5 */\r\n        readonly stepRatio?: number;\r\n    };\r\n}\r\n\r\n/**\r\n * 一个图形映射的逻辑，纯粹的图形语法\r\n * // TODO 后续需要处理 adjust 的配置，然后通过 field 信息。比如 styleField，labelField 等一定是一个数组形式\r\n */\r\ndeclare type Geometry_2 = {\r\n    /** geometry 类型, 'line' | 'interval' | 'point' | 'area' | 'polygon' */\r\n    readonly type?: string;\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly colorField?: string;\r\n    /** shape 的映射字段 */\r\n    readonly shapeField?: string;\r\n    /** size 映射字段 */\r\n    readonly sizeField?: string;\r\n    /** style 的映射字段 */\r\n    readonly styleField?: string;\r\n    /** tooltip 的映射字段 */\r\n    readonly tooltipFields?: string[] | false;\r\n    /** 其他原始字段, 用于 mapping 回调参数 */\r\n    readonly rawFields?: string[];\r\n    /** 图形映射规则 */\r\n    readonly mapping?: MappingOptions;\r\n    /** label 映射通道，因为历史原因导致实现略有区别 */\r\n    readonly label?: Label;\r\n    /** 不同状态的样式 */\r\n    readonly state?: State;\r\n    /** geometry params */\r\n    readonly args?: any;\r\n};\r\n\r\ndeclare type GeometryColumnOption = Pick<ColumnOptions, 'seriesField' | 'isGroup' | 'isStack' | 'isRange' | 'isPercent' | 'columnWidthRatio' | 'marginRatio' | 'columnStyle'> & CommonGeometryOption;\r\n\r\ndeclare type GeometryLabelAttr = Types.GeometryLabelCfg | ((datum: Datum) => Types.GeometryLabelCfg);\r\n\r\ndeclare type GeometryLineOption = Pick<LineOptions, 'seriesField' | 'smooth' | 'connectNulls' | 'lineStyle' | 'point' | 'isStack' | 'stepType'> & CommonGeometryOption;\r\n\r\ndeclare type GeometryOption = GeometryColumnOption | GeometryLineOption;\r\n\r\n/**\r\n * geometry options\r\n */\r\ndeclare type GeometryOptions = Geometry_2 & Partial<Options>;\r\n\r\nexport declare class Heatmap extends Plot<HeatmapOptions> {\r\n    /**\r\n     * 获取 柱形图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<HeatmapOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取直方图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<HeatmapOptions>;\r\n    /**\r\n     * 获取 色块图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<HeatmapOptions>;\r\n}\r\n\r\nexport declare interface HeatmapOptions extends Options {\r\n    /** 热力图类型 */\r\n    readonly type?: 'polygon' | 'density';\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴字段 */\r\n    readonly yField: string;\r\n    /** 颜色字段，可选 */\r\n    readonly colorField?: string;\r\n    /** 点大小映射对应的数据字段名，可选 */\r\n    readonly sizeField?: string;\r\n    /** 热力格子中的形状，可选 */\r\n    readonly shape?: string;\r\n    /** 热力格子中图形的尺寸比例，可选，只有当 shape 和 sizeField 至少指定一项后才生效 */\r\n    readonly sizeRatio?: number;\r\n    /** 热力图形样式 */\r\n    readonly heatmapStyle?: StyleAttr;\r\n    /** 坐标轴映射 */\r\n    readonly reflect?: 'x' | 'y';\r\n    /** 极坐标属性 */\r\n    readonly coordinate?: Types.CoordinateOption;\r\n}\r\n\r\ndeclare interface HierarchyOption {\r\n    /**\r\n     * 字段名 默认为 value\r\n     */\r\n    field?: string;\r\n    tile?: 'treemapBinary' | 'treemapDice' | 'treemapSlice' | 'treemapSliceDice' | 'treemapSquarify' | 'treemapResquarify';\r\n    size?: [number, number];\r\n    round?: boolean;\r\n    ignoreParentValue?: boolean;\r\n    ratio?: number;\r\n    padding?: number;\r\n    paddingInner?: number;\r\n    paddingOuter?: number;\r\n    paddingTop?: number;\r\n    paddingRight?: number;\r\n    paddingBottom?: number;\r\n    paddingLeft?: number;\r\n    as: [string, string];\r\n    sort?(a: any, b: any): number;\r\n}\r\n\r\nexport declare class Histogram extends Plot<HistogramOptions> {\r\n    /**\r\n     * 获取 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<HistogramOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    changeData(data: HistogramOptions['data']): void;\r\n    /**\r\n     * 获取直方图的适配器\r\n     */\r\n    protected getDefaultOptions(): Partial<HistogramOptions>;\r\n    /**\r\n     * 获取直方图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<HistogramOptions>;\r\n}\r\n\r\nexport declare interface HistogramOptions extends Options {\r\n    /** 设置直方图绘制 (进行分箱) 的字段 */\r\n    readonly binField: string;\r\n    /**\r\n     *  设置直方图的分箱宽度，binWidth 影响直方图分成多少箱,\r\n     *  不能与binNumber一起使用\r\n     */\r\n    readonly binWidth?: number;\r\n    /** 设置直方图的分箱数量，binNumber 影响直方图分箱后每个柱子的宽度 */\r\n    readonly binNumber?: number;\r\n    /** 指定层叠字段，通过该字段的值，柱子将会被分割为多个部分，通过颜色进行区分 */\r\n    readonly stackField?: string;\r\n    /** 柱子样式配置，可选 */\r\n    readonly columnStyle?: StyleAttr;\r\n}\r\n\r\n/**\r\n * geometry 映射信息\r\n */\r\ndeclare type IGeometry = Geometry_2 & {\r\n    adjust?: Types.AdjustOption;\r\n};\r\n\r\n/**\r\n * geometry 映射信息\r\n */\r\ndeclare type IGeometry_2 = Geometry_2 & {\r\n    adjust?: Types.AdjustOption;\r\n};\r\n\r\n/** 指标指标的配置 */\r\ndeclare type Indicator = {\r\n    readonly pointer?: {\r\n        readonly style?: ShapeStyle;\r\n    };\r\n    readonly pin?: {\r\n        readonly style?: ShapeStyle;\r\n    };\r\n};\r\n\r\nexport declare type Interaction = {\r\n    readonly type: string;\r\n    readonly cfg?: Record<string, any>;\r\n    /** 是否开启交互, 默认开启 */\r\n    readonly enable?: boolean;\r\n};\r\n\r\n/**\r\n * Interaction 配置\r\n * @param params\r\n */\r\ndeclare function interaction<O extends Pick<Options, 'interactions'>>(params: Params<O>): Params<O>;\r\n\r\nexport declare function interval<O extends IntervalGeometryOptions>(params: Params<O>): Params<O>;\r\n\r\nexport declare interface IntervalGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴字段 */\r\n    readonly yField: string;\r\n    /** 拆分字段，在分组柱状图下同 groupField、colorField，在堆积柱状图下同 stackField、colorField  */\r\n    readonly seriesField?: string;\r\n    /** 是否分组柱形图 */\r\n    readonly isGroup?: boolean;\r\n    /** 是否堆积柱状图 */\r\n    readonly isStack?: boolean;\r\n    /** 柱状图宽度占比 [0-1] */\r\n    readonly widthRatio?: number;\r\n    /** 分组间柱子之间的组间间距(像素级)，仅对分组柱状图适用 */\r\n    readonly intervalPadding?: number;\r\n    /** 分组中柱子之间的间距 [0-1]，仅对分组柱状图适用 */\r\n    readonly marginRatio?: number;\r\n    /** 分组中柱子之间的组内间距(像素级)，仅对分组柱状图适用 */\r\n    readonly dodgePadding?: number;\r\n    /** 柱状图最小宽度（像素） */\r\n    readonly minColumnWidth?: number;\r\n    /** 柱状图最大宽度（像素） */\r\n    readonly maxColumnWidth?: number;\r\n    /** 柱子的背景样式设置 */\r\n    readonly columnBackground?: {\r\n        style: ShapeAttrs_2;\r\n    };\r\n    /** 柱子视觉通道配置（含 color、shape、size、style、tooltip） */\r\n    readonly interval?: MappingOptions;\r\n    /** 分组字段，优先级高于 seriesField , isGroup: true 时会根据 groupField 进行分组。*/\r\n    readonly groupField?: string;\r\n}\r\n\r\n/**\r\n * 子 plot 的配置\r\n */\r\ndeclare type IPlot = IPlotTypes & {\r\n    /**\r\n     * plot view 的布局范围，默认是占满全部\r\n     */\r\n    readonly region?: Region;\r\n};\r\n\r\n/**\r\n * 子 plot 的配置\r\n */\r\ndeclare type IPlot_2 = IPlotTypes;\r\n\r\n/**\r\n * multi-view 中的支持的 plots 类型（带 options 定义）\r\n */\r\ndeclare type IPlotTypes = {\r\n    /**\r\n     * plot 类型\r\n     */\r\n    readonly type: 'line';\r\n    /**\r\n     * plot 配置\r\n     */\r\n    readonly options: OmitSize<LineOptions>;\r\n} | {\r\n    readonly type: 'pie';\r\n    readonly options: OmitSize<PieOptions>;\r\n} | {\r\n    readonly type: 'bar';\r\n    readonly options: OmitSize<BarOptions>;\r\n} | {\r\n    readonly type: 'column';\r\n    readonly options: OmitSize<ColumnOptions>;\r\n} | {\r\n    readonly type: 'area';\r\n    readonly options: OmitSize<AreaOptions>;\r\n} | {\r\n    readonly type: 'gauge';\r\n    readonly options: OmitSize<GaugeOptions>;\r\n} | {\r\n    readonly type: 'tiny-line';\r\n    readonly options: OmitSize<TinyLineOptions>;\r\n} | {\r\n    readonly type: 'tiny-area';\r\n    readonly options: OmitSize<TinyAreaOptions>;\r\n} | {\r\n    readonly type: 'tiny-column';\r\n    readonly options: OmitSize<TinyColumnOptions>;\r\n} | {\r\n    readonly type: 'ring-progress';\r\n    readonly options: OmitSize<RingProgressOptions>;\r\n} | {\r\n    readonly type: 'progress';\r\n    readonly options: OmitSize<ProgressOptions>;\r\n} | {\r\n    readonly type: 'histogram';\r\n    readonly options: OmitSize<HistogramOptions>;\r\n} | {\r\n    readonly type: 'scatter';\r\n    readonly options: OmitSize<ScatterOptions>;\r\n};\r\n\r\n/**\r\n * 子 view 的配置。暂时不开嵌套 view 的情况\r\n */\r\ndeclare type IView = {\r\n    /**\r\n     * view 的布局范围，默认是占满全部\r\n     */\r\n    readonly region?: Region;\r\n    /**\r\n     * view 中的数据\r\n     */\r\n    readonly data: Data;\r\n    /**\r\n     * view 中对应的 meta 字段配置\r\n     */\r\n    readonly meta?: Record<string, Meta>;\r\n    /**\r\n     * 坐标系的配置，每一个 view 具有相同的坐标系\r\n     */\r\n    readonly coordinate?: Types.CoordinateOption;\r\n    /**\r\n     * 图形 geometry 及映射配置\r\n     */\r\n    readonly geometries: IGeometry[];\r\n    /**\r\n     * x,y  轴配置\r\n     */\r\n    readonly axes?: false | Record<string, Axis>;\r\n    /**\r\n     * interactions 配置\r\n     */\r\n    readonly interactions?: Interaction[];\r\n    /**\r\n     * annotation 配置\r\n     */\r\n    readonly annotations?: Annotation[];\r\n    /**\r\n     * animation 配置\r\n     */\r\n    readonly animation?: Animation_2;\r\n    /**\r\n     * tooltip 配置\r\n     */\r\n    readonly tooltip?: Tooltip;\r\n};\r\n\r\n/**\r\n * 子 view 的配置。\r\n * 1. 暂时不开嵌套 view 的情况\r\n * 2. 暂不开放 分面子 view 的 meta 独立设置\r\n */\r\ndeclare type IView_2 = {\r\n    /**\r\n     * 图形 geometry 及映射配置\r\n     */\r\n    readonly geometries: IGeometry_2[];\r\n    /**\r\n     * 1. optional，view 中的数据，默认由分面数据来根据拆分维度值进行分配\r\n     */\r\n    readonly data?: Data;\r\n    /**\r\n     * 2. meta\r\n     */\r\n    readonly meta?: Record<string, Axis>;\r\n    /**\r\n     * 3. 坐标系的配置，每一个 view 具有相同的坐标系\r\n     */\r\n    readonly coordinate?: Types.CoordinateOption;\r\n    /**\r\n     * 4. 坐标轴配置\r\n     */\r\n    readonly axes?: false | Record<string, Axis>;\r\n    /**\r\n     * 5. interactions 配置\r\n     */\r\n    readonly interactions?: Interaction[];\r\n    /**\r\n     * 6. annotation 配置\r\n     */\r\n    readonly annotations?: Annotation[];\r\n    /**\r\n     * 7. animation 配置\r\n     */\r\n    readonly animation?: Animation_2;\r\n    /**\r\n     * 8. tooltip 配置\r\n     */\r\n    readonly tooltip?: Tooltip;\r\n};\r\n\r\n/**\r\n * 实验室图表，实验室中的图表分成不同的阶段。\r\n */\r\nexport declare class Lab {\r\n    static get MultiView(): typeof Mix;\r\n}\r\n\r\ndeclare type Label = false | ({\r\n    /** 映射的字段。 */\r\n    readonly fields?: string[];\r\n    /** 回调函数。 */\r\n    readonly callback?: Types.LabelCallback;\r\n    /** 功能同 content ，兼容 v1 */\r\n    readonly formatter?: Types.GeometryLabelCfg['content'];\r\n} & Types.GeometryLabelCfg);\r\n\r\ndeclare interface Labels extends Omit<TextOption, 'position'> {\r\n    position?: AnnotationPosition;\r\n}\r\n\r\n/** leaderLineCfg of waterfall */\r\ndeclare type LeaderLineCfg = {\r\n    style?: ShapeStyle;\r\n};\r\n\r\ndeclare type Legend = false | Types.LegendCfg;\r\n\r\n/**\r\n * 通用 legend 配置, 适用于带 colorField 或 seriesField 的图表\r\n * @param params\r\n */\r\ndeclare function legend<O extends Pick<Options, 'legend'> & {\r\n    colorField?: string;\r\n    seriesField?: string;\r\n}>(params: Params<O>): Params<O>;\r\n\r\nexport declare class Line extends Plot<LineOptions> {\r\n    /**\r\n     * 获取 折线图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<LineOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: LineOptions['data']): void;\r\n    /**\r\n     * 获取 折线图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<LineOptions>;\r\n    /**\r\n     * 获取 折线图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<LineOptions>;\r\n}\r\n\r\n/**\r\n * line 辅助点的配置处理\r\n * @param params\r\n */\r\nexport declare function line<O extends LineGeometryOptions>(params: Params<O>): Params<O>;\r\n\r\nexport declare interface LineGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 是否连接空数据 */\r\n    readonly connectNulls?: boolean;\r\n    /** line 映射配置 */\r\n    readonly line?: MappingOptions;\r\n    /** 阶梯折线图类型 */\r\n    readonly stepType?: string;\r\n}\r\n\r\nexport declare interface LineOptions extends Options {\r\n    /** 阶梯折线图类型 */\r\n    readonly stepType?: string;\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否堆积 */\r\n    readonly isStack?: boolean;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 是否连接空数据 */\r\n    readonly connectNulls?: boolean;\r\n    /** 折线图形样式 */\r\n    readonly lineStyle?: StyleAttr;\r\n    /** 折线 shape 配置 */\r\n    readonly lineShape?: Required<LineGeometryOptions>['line']['shape'];\r\n    /** 折线数据点：1、图形映射属性 2、状态样式 */\r\n    readonly point?: PointGeometryOptions['point'] & Pick<PointGeometryOptions, 'state'>;\r\n}\r\n\r\n/**\r\n * 传说中的水波图\r\n */\r\nexport declare class Liquid extends Plot<LiquidOptions> {\r\n    /**\r\n     * 获取 饼图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<LiquidOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 水波图 默认配置项, 供 base 获取\r\n     */\r\n    protected getDefaultOptions(): Partial<LiquidOptions>;\r\n    /**\r\n     * 更新数据\r\n     * @param percent\r\n     */\r\n    changeData(percent: number): void;\r\n    /**\r\n     * 获取适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<LiquidOptions>;\r\n}\r\n\r\n/** 配置类型定义 */\r\nexport declare interface LiquidOptions extends Omit<Options, 'data'> {\r\n    /** 指标比例 */\r\n    readonly percent: number;\r\n    /** 配置水波图的颜色，使用默认色板的颜色 */\r\n    readonly color?: ColorAttr;\r\n    /** 水波的外半径， 0 ~ 1，默认为 0.9 */\r\n    readonly radius?: number;\r\n    /** 配置水波图的样式 */\r\n    readonly liquidStyle?: StyleAttr;\r\n    /** 指标文本组件 */\r\n    readonly statistic?: Statistic;\r\n    /** 外环轮廓的配置 */\r\n    readonly outline?: Outline;\r\n    /** 波的配置 */\r\n    readonly wave?: Wave;\r\n    /** 波的形状配置（'circle' | 'rect' | 'triangle' | 'diamond'）*/\r\n    readonly shape?: string | ShapeCallback;\r\n}\r\n\r\nexport declare type Locale = {\r\n    locale: string;\r\n    general: {\r\n        increase: string;\r\n        decrease: string;\r\n        root: string;\r\n    };\r\n    /** 中心文本 */\r\n    statistic: {\r\n        total: string;\r\n    };\r\n    /** 转化率组件 */\r\n    conversionTag: {\r\n        label: string;\r\n    };\r\n    legend?: Record<string, string>;\r\n    tooltip?: Record<string, string>;\r\n    slider?: Record<string, string>;\r\n    scrollbar?: Record<string, string>;\r\n    waterfall: {\r\n        /** 总计或累计值 */\r\n        total: string;\r\n    };\r\n};\r\n\r\n/**\r\n * 图形映射属性，按照优先级来的\r\n */\r\ndeclare type MappingOptions = {\r\n    /** color 映射 */\r\n    readonly color?: ColorAttr;\r\n    /** shape 映射 */\r\n    readonly shape?: ShapeAttr;\r\n    /** 大小映射, 提供回调的方式 */\r\n    readonly size?: SizeAttr;\r\n    /** 样式映射 */\r\n    readonly style?: StyleAttr;\r\n    /** tooltip 映射 */\r\n    readonly tooltip?: TooltipAttr;\r\n};\r\n\r\n/**\r\n * 计算文本在画布中的宽度\r\n * @param text 文本\r\n * @param font 字体\r\n */\r\nexport declare const measureTextWidth: {\r\n    (...args: any[]): any;\r\n    cache: Map<any, any>;\r\n};\r\n\r\n/** scale 元信息，取名为 meta */\r\nexport declare type Meta = ScaleConfig & {\r\n    /**\r\n     * scale 的 type 类型\r\n     * 对于连续的，一般是 linear，对于分类一般为 cat。\r\n     * 当然也有 log, pow, time 等类型，或者通过 tickMethod 自定义自己的 scale\r\n     */\r\n    readonly type?: string;\r\n    /**\r\n     * 是否进行 scale 的同步。\r\n     * - 设置为 false 则不同步\r\n     * - 设置为 true 则以 field 为 key 进行同步\r\n     * - 设置为 string，则以这个 string 为 key 进行同步\r\n     */\r\n    readonly sync?: boolean | string;\r\n};\r\n\r\n/**\r\n * 多图层图形，释放 G2 80% 的功能，可以用来做：\r\n * 1. 图层叠加的图：\r\n *   - 折线 + 置信度区间迭代\r\n *   - 嵌套饼图\r\n *   - ...\r\n * 2. 图层划分的图\r\n *   - 多维图\r\n *   - 柱饼组合图\r\n *   - ...\r\n */\r\ndeclare class Mix extends Plot<MixOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<MixOptions>;\r\n}\r\nexport { Mix }\r\nexport { Mix as MultiView }\r\n\r\n/** 配置类型定义 */\r\ndeclare interface MixOptions extends Omit<Options, 'data' | 'legend' | 'xAxis' | 'yAxis' | 'legend' | 'tooltip' | 'slider' | 'scrollbar'> {\r\n    /**\r\n     * 是否同步子 view 的配置\r\n     * 目前仅仅支持 true / false，后续需要增加 function 的方式进行自定义 view 之前的布局同步\r\n     */\r\n    readonly syncViewPadding?: boolean;\r\n    /**\r\n     * 每一个图层的配置。\r\n     * 每个图层包括有自己的：数据、图形、图形映射。\r\n     */\r\n    readonly views?: IView[];\r\n    /**\r\n     * 支持使用已有的 plot，限定与指定 plot 类型\r\n     */\r\n    readonly plots?: IPlot[];\r\n    /**\r\n     * tooltip 配置在 chart 层配置\r\n     */\r\n    readonly tooltip?: Tooltip;\r\n    /**\r\n     * legend 配置，统一顶层配置\r\n     */\r\n    readonly legend?: false | Record<string, Legend>;\r\n}\r\nexport { MixOptions }\r\nexport { MixOptions as MultiViewOptions }\r\n\r\n/**\r\n * 节点的 depth 自定义\r\n */\r\ndeclare type NodeDepth = (datum: Datum, maxDepth: number) => number;\r\n\r\n/**\r\n * 节点排序方法的类型定义\r\n */\r\ndeclare type NodeSort = (a: Datum, b: Datum) => number;\r\n\r\n/**\r\n * 移除 options 中的 width、height 设置\r\n */\r\ndeclare type OmitSize<T> = Omit<T, 'width' | 'height'>;\r\n\r\n/** 基础的 Options 配置 */\r\nexport declare type Options = {\r\n    /** 画布宽度 */\r\n    readonly width?: number;\r\n    /** 画布高度 */\r\n    readonly height?: number;\r\n    /** 画布是否自动适配容器大小，默认为 true */\r\n    readonly autoFit?: boolean;\r\n    /** 画布的 padding 值，或者开启 'auto' */\r\n    readonly padding?: number[] | number | 'auto';\r\n    /** 额外怎加的 padding 值 */\r\n    readonly appendPadding?: number[] | number;\r\n    /** 是否同步子 view 的 padding */\r\n    readonly syncViewPadding?: boolean | Types.SyncViewPaddingFn;\r\n    /** 国际化 */\r\n    readonly locale?: string;\r\n    /** 渲染引擎 */\r\n    readonly renderer?: 'svg' | 'canvas';\r\n    /** 屏幕像素比，默认为 window.devicePixelRatio */\r\n    readonly pixelRatio?: number;\r\n    /** 是否开启局部渲染，默认为 true */\r\n    readonly localRefresh?: boolean;\r\n    /** 支持 CSS transform，开启后图表的交互以及事件将在页面设置了 css transform 属性时生效，默认关闭。 */\r\n    readonly supportCSSTransform?: boolean;\r\n    /** 具体的数据 */\r\n    readonly data: Record<string, any>[];\r\n    /** 数据字段元信息 */\r\n    readonly meta?: Record<string, Meta>;\r\n    /** 主题，G2 主题，字符串或者 theme object */\r\n    readonly theme?: string | object;\r\n    /** 颜色色板 */\r\n    readonly color?: ColorAttr;\r\n    /** xAxis 的配置项 */\r\n    readonly xAxis?: Axis;\r\n    /** yAxis 的配置项 */\r\n    readonly yAxis?: Axis;\r\n    /** 数据标签的配置 */\r\n    readonly label?: Label;\r\n    /** tooltip 的配置项 */\r\n    readonly tooltip?: Tooltip;\r\n    /** 图例 legend 的配置项 */\r\n    readonly legend?: Legend;\r\n    /** 缩略轴 slider 的配置项 */\r\n    readonly slider?: Slider;\r\n    /** 缩略轴 scrollbar 的配置项 */\r\n    readonly scrollbar?: Scrollbar;\r\n    readonly animation?: Animation_2;\r\n    readonly interactions?: Interaction[];\r\n    readonly annotations?: Annotation[];\r\n    readonly state?: State;\r\n    /** 是否对超出坐标系范围的 Geometry 进行剪切 */\r\n    readonly limitInPlot?: boolean;\r\n};\r\n\r\n/** 联通区域组件：使用于堆叠柱形图、堆叠条形图 */\r\ndeclare interface OptionWithConnectedArea {\r\n    connectedArea?: ConnectedAreaOptions | false;\r\n}\r\n\r\ndeclare interface OptionWithConversionTag {\r\n    conversionTag?: ConversionTagOptions | false;\r\n}\r\n\r\n/** 轮廓的配置 */\r\ndeclare type Outline = Partial<{\r\n    /** 外环的宽度，默认为 2px */\r\n    readonly border: number;\r\n    /** 内外的边距，默认为 0px */\r\n    readonly distance: number;\r\n    /** 外环的样式 */\r\n    readonly style?: Pick<ShapeStyle, 'stroke' | 'strokeOpacity'>;\r\n}>;\r\n\r\n/**\r\n * 给 G2Plot 提供非常简单的开放开发的机制。目的是能够让社区和业务上自己基于 G2Plot 开发自己的定制图表库。主要分成几类图表：\r\n * 1. 领域专业的图表，内部同学因为没有场景，不一定能做的完善。\r\n * 2. 定制业务的图表，不具备通用性\r\n * 3. 趣味性的可视化组件\r\n * 然后官方可以根据社区的情况，可以进行一些官方推荐和采纳。\r\n *\r\n * 如果使用？\r\n *\r\n * ```ts\r\n * import { P } from '@antv/g2plot';\r\n * import { GeoWorldMap, GeoWorldMapOptions } from 'g2plot-geo-world-map';\r\n *\r\n * const plot = new P('container', {\r\n *   geoJson: '',\r\n *   longitude: '',\r\n *   latitude: '',\r\n * }, GeoWorldMap, defaultOptions);\r\n *\r\n * plot.render();\r\n * ```\r\n */\r\nexport declare class P<O extends PickOptions> extends Plot<O> {\r\n    /** 统一为 any plot */\r\n    readonly type = \"g2-plot\";\r\n    /** 外部传入的 defaultOptions */\r\n    private defaultOptions;\r\n    /** 外部传入的 adaptor 函数 */\r\n    private adaptor;\r\n    /**\r\n     * 相比普通图表增加 adaptor 参数。\r\n     * @param container\r\n     * @param options\r\n     * @param adaptor\r\n     * @param defaultOptions\r\n     */\r\n    constructor(container: string | HTMLElement, options: O, adaptor: Adaptor<O>, defaultOptions?: Partial<O>);\r\n    /**\r\n     * 实现父类方法，直接使用传入的\r\n     */\r\n    protected getDefaultOptions(): Partial<O>;\r\n    /**\r\n     * 实现父类方法，直接使用传入的\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<O>;\r\n}\r\n\r\n/**\r\n * adaptor flow 的参数\r\n */\r\nexport declare type Params<O> = {\r\n    readonly chart: View;\r\n    readonly options: O;\r\n    /** 一些存储一些扩展信息，用户上游 adaptor 向下游传递临时数据 */\r\n    readonly ext?: Record<string, any>;\r\n};\r\n\r\ndeclare type PartialIntervalGeometryOptions = Pick<IntervalGeometryOptions, 'dodgePadding' | 'intervalPadding'>;\r\n\r\n/** 单独 pick 出来的用于基类的类型定义 */\r\ndeclare type PickOptions = Pick<Options, 'width' | 'height' | 'padding' | 'appendPadding' | 'renderer' | 'pixelRatio' | 'autoFit' | 'syncViewPadding' | 'supportCSSTransform' | 'limitInPlot' | 'locale'>;\r\n\r\nexport declare class Pie extends Plot<PieOptions> {\r\n    /**\r\n     * 获取 饼图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<PieOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 更新数据\r\n     * @param data\r\n     */\r\n    changeData(data: PieOptions['data']): void;\r\n    /**\r\n     * 获取 饼图 默认配置项, 供 base 获取\r\n     */\r\n    protected getDefaultOptions(): Partial<PieOptions>;\r\n    /**\r\n     * 获取 饼图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<PieOptions>;\r\n}\r\n\r\nexport declare interface PieOptions extends Options {\r\n    /** 角度映射字段 */\r\n    readonly angleField: string;\r\n    /** 颜色映射字段 */\r\n    readonly colorField: string;\r\n    /** 饼图半径 */\r\n    readonly radius?: number;\r\n    /** 饼图内半径 */\r\n    readonly innerRadius?: number;\r\n    /** 饼图标签，type: 'inner' | 'outer' | 'spider' */\r\n    readonly label?: Label;\r\n    /** 饼图图形样式 */\r\n    readonly pieStyle?: StyleAttr;\r\n    /** 圆环的开始角度 */\r\n    readonly startAngle?: number;\r\n    /** 圆环的结束角度 */\r\n    readonly endAngle?: number;\r\n    /**\r\n     * 指标卡组件: 显示在环图中心，可以代替tooltip，显示环图数据的总计值和各项数据\r\n     * 启用 statistic 组件的同时将自动关闭tooltip\r\n     */\r\n    readonly statistic?: Statistic;\r\n}\r\n\r\n/**\r\n * 所有 plot 的基类\r\n */\r\nexport declare abstract class Plot<O extends PickOptions> extends EE {\r\n    /**\r\n     * 获取默认的 options 配置项\r\n     * 每个组件都可以复写\r\n     */\r\n    static getDefaultOptions(): any;\r\n    /** plot 类型名称 */\r\n    abstract readonly type: string;\r\n    /** plot 的 schema 配置 */\r\n    options: O;\r\n    /** plot 绘制的 dom */\r\n    readonly container: HTMLElement;\r\n    /** G2 chart 实例 */\r\n    chart: Chart;\r\n    /** resizer unbind  */\r\n    private unbind;\r\n    constructor(container: string | HTMLElement, options: O);\r\n    /**\r\n     * 创建 G2 实例\r\n     */\r\n    private createG2;\r\n    /**\r\n     * 计算默认的 chart 大小。逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小\r\n     * @param width\r\n     * @param height\r\n     */\r\n    private getChartSize;\r\n    /**\r\n     * 绑定代理所有 G2 的事件\r\n     */\r\n    private bindEvents;\r\n    /**\r\n     * 获取默认的 options 配置项\r\n     * 每个组件都可以复写\r\n     */\r\n    protected getDefaultOptions(): any;\r\n    /**\r\n     * 每个组件有自己的 schema adaptor\r\n     */\r\n    protected abstract getSchemaAdaptor(): Adaptor<O>;\r\n    /**\r\n     * 绘制\r\n     */\r\n    render(): void;\r\n    /**\r\n     * 更新: 更新配置且重新渲染\r\n     * @param options\r\n     */\r\n    update(options: Partial<O>): void;\r\n    /**\r\n     * 更新配置\r\n     * @param options\r\n     */\r\n    protected updateOption(options: Partial<O>): void;\r\n    /**\r\n     * 设置状态\r\n     * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\r\n     * @param conditions 条件，支持数组\r\n     * @param status 是否激活，默认 true\r\n     */\r\n    setState(type: StateName, condition: StateCondition, status?: boolean): void;\r\n    /**\r\n     * 获取状态\r\n     */\r\n    getStates(): StateObject[];\r\n    /**\r\n     * 更新数据\r\n     * @override\r\n     * @param options\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 修改画布大小\r\n     * @param width\r\n     * @param height\r\n     */\r\n    changeSize(width: number, height: number): void;\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy(): void;\r\n    /**\r\n     * 执行 adaptor 操作\r\n     */\r\n    protected execAdaptor(): void;\r\n    /**\r\n     * 当图表容器大小变化的时候，执行的函数\r\n     */\r\n    protected triggerResize(): void;\r\n    /**\r\n     * 绑定 dom 容器大小变化的事件\r\n     */\r\n    private bindSizeSensor;\r\n    /**\r\n     * 取消绑定\r\n     */\r\n    private unbindSizeSensor;\r\n}\r\n\r\n/** 点位置信息 */\r\nexport declare type Point = {\r\n    readonly x: number;\r\n    readonly y: number;\r\n};\r\n\r\n/**\r\n * point 辅助点的配置处理\r\n * @param params\r\n */\r\nexport declare function point<O extends PointGeometryOptions>(params: Params<O>): Params<O>;\r\n\r\nexport declare interface PointGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** size 映射字段 */\r\n    readonly sizeField?: string;\r\n    /** shape 的映射字段 */\r\n    readonly shapeField?: string;\r\n    /** point 图形映射规则 */\r\n    readonly point?: MappingOptions;\r\n}\r\n\r\n/**\r\n * polygon 的配置处理\r\n * @param params\r\n */\r\nexport declare function polygon<O extends PolygonGeometryOptions>(params: Params<O>): Params<O>;\r\n\r\nexport declare interface PolygonGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** point 图形映射规则 */\r\n    readonly polygon?: MappingOptions;\r\n}\r\n\r\n/** 描述一个点 x y 位置 */\r\nexport declare type Position = [number, number];\r\n\r\nexport declare class Progress extends Plot<ProgressOptions> {\r\n    /**\r\n     * 获取 仪表盘 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<ProgressOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 更新数据\r\n     * @param percent\r\n     */\r\n    changeData(percent: number): void;\r\n    protected getDefaultOptions(): Partial<ProgressOptions>;\r\n    /**\r\n     * 获取 进度图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<ProgressOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface ProgressOptions extends Omit<Options, 'data' | 'color'> {\r\n    /** 进度百分比 */\r\n    readonly percent: number;\r\n    /** 条图宽度占比 [0-1] */\r\n    readonly barWidthRatio?: number;\r\n    /** 进度条颜色 */\r\n    readonly color?: ColorAttr;\r\n    /** 进度条样式 */\r\n    readonly progressStyle?: StyleAttr;\r\n}\r\n\r\ndeclare interface QuadrantOptions {\r\n    /** x 方向上的象限分割基准线，默认为 0  */\r\n    readonly xBaseline?: number;\r\n    /** y 方向上的象限分割基准线，默认为 0  */\r\n    readonly yBaseline?: number;\r\n    /** 配置象限分割线的样式  */\r\n    readonly lineStyle?: RegionPositionBaseOption;\r\n    /** 象限样式 */\r\n    readonly regionStyle?: RegionPositionBaseOption[];\r\n    /** 象限文本配置  */\r\n    readonly labels?: Labels[];\r\n}\r\n\r\nexport declare class Radar extends Plot<RadarOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 获取 雷达图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<RadarOptions>;\r\n    /**\r\n     * 获取 雷达图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<RadarOptions>;\r\n}\r\n\r\nexport declare interface RadarOptions extends Options {\r\n    /** x 字段 */\r\n    readonly xField: string;\r\n    /** y 字段，映射雷达图的射线长度 */\r\n    readonly yField: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 折线图形样式 */\r\n    readonly lineStyle?: ShapeStyle | ((x: any, y: any, series?: any) => ShapeStyle);\r\n    /** 数据点图形样式 */\r\n    readonly point?: PointGeometryOptions['point'] & Pick<PointGeometryOptions, 'state'>;\r\n    /** area 图形样式, 均提供回调的方式, 不开放 field 映射配置 */\r\n    readonly area?: AreaGeometryOptions['area'];\r\n    /** 角度轴配置 */\r\n    readonly xAxis?: any;\r\n    /** 径向轴配置 */\r\n    readonly yAxis?: any;\r\n    /** 雷达图半径 */\r\n    readonly radius?: number;\r\n    /** 雷达图开始角度 */\r\n    readonly startAngle?: number;\r\n    /** 雷达图结束角度 */\r\n    readonly endAngle?: number;\r\n}\r\n\r\n/**\r\n * 玉珏图\r\n */\r\nexport declare class RadialBar extends Plot<RadialBarOptions> {\r\n    static getDefaultOptions(): Partial<RadialBarOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 获取默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<RadialBarOptions>;\r\n    /**\r\n     * 获取适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<RadialBarOptions>;\r\n}\r\n\r\n/** 配置类型定义 */\r\nexport declare interface RadialBarOptions extends Options, Pick<BarOptions, 'barBackground' | 'minBarWidth' | 'maxBarWidth'> {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 样式 */\r\n    readonly barStyle?: ShapeAttrs;\r\n    /** 最大旋转角度 0~360 */\r\n    readonly maxAngle?: number;\r\n    /** 圆半径 */\r\n    readonly radius?: number;\r\n    /** 圆内半径 */\r\n    readonly innerRadius?: number;\r\n    /** 圆环的开始角度 */\r\n    readonly startAngle?: number;\r\n    /** 圆环的结束角度 */\r\n    readonly endAngle?: number;\r\n    /** 颜色字段 */\r\n    readonly colorField?: string;\r\n    /** 类型 */\r\n    readonly type?: string;\r\n}\r\n\r\ndeclare type Range_2 = {\r\n    /** 辅助的刻度值 0 ~ 1 的数字 */\r\n    readonly ticks?: number[];\r\n    /** 辅助刻度的颜色配置 */\r\n    readonly color?: string | string[];\r\n    /** 仪表盘辅助背景的宽度 */\r\n    readonly width?: number;\r\n};\r\n\r\n/** 一个区域描述 */\r\nexport declare type Region = {\r\n    /** the top-left corner of layer-range, range from 0 to 1, relative to parent layer's range */\r\n    readonly start: Point;\r\n    /** the bottom-right corner of layer-range, range from 0 to 1, relative to parent layer's range */\r\n    readonly end: Point;\r\n};\r\n\r\nexport declare type RegionPositionBaseOption = Types.RegionPositionBaseOption;\r\n\r\n/**\r\n * register a locale\r\n * @param locale\r\n * @param localeObj\r\n */\r\nexport declare function registerLocale(locale: string, localeObj: Locale): void;\r\n\r\ndeclare interface RegressionLineOptions {\r\n    /** 是否顶层显示，默认 false  */\r\n    readonly top?: boolean;\r\n    /** 回归线类型  */\r\n    readonly type?: string;\r\n    /** 配置回归线样式  */\r\n    readonly style?: ShapeStyle;\r\n    /** 自定义算法 [[0,0],[100,100]] */\r\n    readonly algorithm?: Array<[number, number]> | ((data: any) => Array<[number, number]>);\r\n}\r\n\r\nexport declare class RingProgress extends Plot<RingProgressOptions> {\r\n    /**\r\n     * 获取默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<RingProgressOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 更新数据\r\n     * @param percent\r\n     */\r\n    changeData(percent: number): void;\r\n    protected getDefaultOptions(): Partial<RingProgressOptions>;\r\n    /**\r\n     * 获取 环形进度图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<RingProgressOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface RingProgressOptions extends Omit<Options, 'data' | 'tooltip' | 'legend' | 'label' | 'color'> {\r\n    /** 进度百分比 */\r\n    readonly percent: number;\r\n    /** 外环的半径 */\r\n    readonly radius?: number;\r\n    /** 内环的半径 */\r\n    readonly innerRadius?: number;\r\n    /** 进度条颜色 */\r\n    readonly color?: ColorAttr;\r\n    /** 进度条样式 */\r\n    readonly progressStyle?: StyleAttr;\r\n    /** 统计内容组件 */\r\n    readonly statistic?: Statistic;\r\n}\r\n\r\nexport declare class Rose extends Plot<RoseOptions> {\r\n    /**\r\n     * 获取 玫瑰图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<RoseOptions>;\r\n    /** 玫瑰图 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 获取默认的 options 配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<RoseOptions>;\r\n    /**\r\n     * 获取 玫瑰图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<RoseOptions>;\r\n}\r\n\r\nexport declare interface RoseOptions extends Options {\r\n    /** 扇形切片分类所对应的数据字段名（每个扇形的弧度相等） */\r\n    readonly xField: string;\r\n    /** 扇形切片半径长度所对应的数据字段名 */\r\n    readonly yField: string;\r\n    /** 拆分字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否分组玫瑰图 */\r\n    readonly isGroup?: boolean;\r\n    /** 是否堆积玫瑰图 */\r\n    readonly isStack?: boolean;\r\n    /**\r\n     * 玫瑰图的半径，原点为画布中心。配置值域为 (0,1]\r\n     * 1 代表玫瑰图大小为 1，即撑满绘图区域\r\n     */\r\n    readonly radius?: number;\r\n    /** 内部空心圆的半径，规则与 radius 一致 */\r\n    readonly innerRadius?: number;\r\n    /** 玫瑰图开始角度 */\r\n    readonly startAngle?: number;\r\n    /** 玫瑰图结束角度 */\r\n    readonly endAngle?: number;\r\n    /**\r\n     * 设置扇形样式。sectorStyle 中的fill会覆盖 color 的配置\r\n     * sectorStyle 可以直接指定，也可以通过 callback 的方式，根据数据为每个扇形切片指定单独的样式\r\n     */\r\n    readonly sectorStyle?: StyleAttr;\r\n}\r\n\r\n/**\r\n *  桑基图 Sankey\r\n */\r\nexport declare class Sankey extends Plot<SankeyOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    static getDefaultOptions(): Partial<SankeyOptions>;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: Data): void;\r\n    /**\r\n     * 获取适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<SankeyOptions>;\r\n    /**\r\n     * 获取 条形图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<SankeyOptions>;\r\n}\r\n\r\n/** 配置类型定义 */\r\nexport declare interface SankeyOptions extends Omit<Options, 'xField' | 'yField' | 'xAxis' | 'yAxis'> {\r\n    /**\r\n     * 来源字段\r\n     */\r\n    readonly sourceField: string;\r\n    /**\r\n     * 去向字段\r\n     */\r\n    readonly targetField: string;\r\n    /**\r\n     * 权重字段\r\n     */\r\n    readonly weightField: string;\r\n    /**\r\n     * 附加的 元字段\r\n     */\r\n    readonly rawFields?: string[];\r\n    /**\r\n     * 数据\r\n     */\r\n    readonly data: Data;\r\n    /**\r\n     * 节点宽度的比如，参考画布的宽度，默认值为 0.008\r\n     */\r\n    readonly nodeWidthRatio?: number;\r\n    /**\r\n     * 节点宽度的像素设置，优先级高于 nodeWidthRatio\r\n     */\r\n    readonly nodeWidth?: number;\r\n    /**\r\n     * 节点之间的间距比例，参考画布高度，默认值为 0.03\r\n     */\r\n    readonly nodePaddingRatio?: number;\r\n    /**\r\n     * 节点间距的像素设置，优先级高于 nodePaddingRatio\r\n     */\r\n    readonly nodePadding?: number;\r\n    /**\r\n     * 节点对齐的方式，默认为 justify\r\n     */\r\n    readonly nodeAlign?: 'left' | 'right' | 'center' | 'justify';\r\n    /**\r\n     * 节点排序方式，默认为空\r\n     */\r\n    readonly nodeSort?: NodeSort;\r\n    /**\r\n     * 节点排放分层的顺序，从 0 开始，并且返回值需要保证所有的层级都有节点\r\n     */\r\n    readonly nodeDepth?: NodeDepth;\r\n    /**\r\n     * 节点样式\r\n     */\r\n    readonly nodeStyle?: StyleAttr;\r\n    /**\r\n     * 边样式\r\n     */\r\n    readonly edgeStyle?: StyleAttr;\r\n    /**\r\n     * 节点位置是否可以拖拽，默认为 false\r\n     */\r\n    readonly nodeDraggable?: boolean;\r\n}\r\n\r\n/**\r\n * scale 的 adaptor\r\n * @param axes\r\n */\r\ndeclare function scale(axes: Record<string, Axis>, meta?: Options['meta']): <O extends Pick<Options, \"meta\">>(params: Params<O>) => Params<O>;\r\n\r\nexport declare class Scatter extends Plot<ScatterOptions> {\r\n    /**\r\n     * 获取 散点图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<ScatterOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: ScatterOptions['data']): void;\r\n    /**\r\n     * 获取 散点图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<ScatterOptions>;\r\n    protected getDefaultOptions(): Partial<ScatterOptions>;\r\n}\r\n\r\nexport declare interface ScatterOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴字段 */\r\n    readonly yField: string;\r\n    /** 数据调整类型 */\r\n    readonly type?: 'jitter' | 'stack' | 'symmetric' | 'dodge';\r\n    /** 点大小映射对应的数据字段名 */\r\n    readonly sizeField?: string;\r\n    /** size 对应的图例 */\r\n    readonly sizeLegend?: Options['legend'];\r\n    /** 散点图大小 */\r\n    readonly size?: SizeAttr;\r\n    /** 点形状映射对应的数据字段名 */\r\n    readonly shapeField?: string;\r\n    /** shape 对应的图例 */\r\n    readonly shapeLegend?: Options['legend'];\r\n    /** 散点图形状 */\r\n    readonly shape?: ShapeAttr;\r\n    /** 散点图样式 */\r\n    readonly pointStyle?: StyleAttr;\r\n    /** 点颜色映射对应的数据字段名 */\r\n    readonly colorField?: string;\r\n    /** 四象限组件 */\r\n    readonly quadrant?: QuadrantOptions;\r\n    /** 归曲线 */\r\n    readonly regressionLine?: RegressionLineOptions;\r\n}\r\n\r\n/**\r\n * schema 的配置处理\r\n * @param params\r\n */\r\nexport declare function schema<O extends SchemaGeometryOptions>(params: Params<O>): Params<O>;\r\n\r\nexport declare interface SchemaGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** point 图形映射规则 */\r\n    readonly schema?: MappingOptions;\r\n}\r\n\r\ndeclare type Scrollbar = Types.ScrollbarOption;\r\n\r\n/**\r\n * 全局变量设置\r\n * @param key\r\n * @param value\r\n */\r\nexport declare function setGlobal(datum: Record<string, any>): void;\r\n\r\n/** 图形 shape 映射 */\r\nexport declare type ShapeAttr = string | string[] | ((datum: Datum) => string);\r\n\r\ndeclare type ShapeCallback = (x: number, y: number, width: number, height: number) => PathCommand[];\r\n\r\n/** 图形属性 */\r\nexport declare type ShapeStyle = ShapeAttrs;\r\n\r\nexport declare type Size = {\r\n    readonly width: number;\r\n    readonly height: number;\r\n};\r\n\r\n/** 尺寸大小映射 */\r\nexport declare type SizeAttr = number | [number, number] | ((datum: Datum) => number);\r\n\r\ndeclare type Slider = Types.SliderOption;\r\n\r\nexport declare type State = Types.StateOption;\r\n\r\n/** 状态条件 */\r\nexport declare type StateCondition = (data: Datum | Data) => boolean;\r\n\r\n/** 状态名称，G2 Element 开放 'active' | 'inactive' | 'selected' | 'default' 四种状态 */\r\nexport declare type StateName = 'active' | 'inactive' | 'selected' | 'default';\r\n\r\n/** 状态对象, 可通过 `plot.getStates()` 获取 */\r\nexport declare type StateObject = {\r\n    data: Datum | Data;\r\n    state: string;\r\n    geometry: Geometry;\r\n    element: Element_2;\r\n};\r\n\r\n/**\r\n * 中心文本的统计信息，统一一个数据结构\r\n */\r\nexport declare type Statistic = {\r\n    readonly title?: false | StatisticText;\r\n    readonly content?: false | StatisticText;\r\n};\r\n\r\n/**\r\n * 统计文本\r\n * - 支持三种设置模式(优先级)：customHtml > formatter > content\r\n */\r\nexport declare type StatisticText = {\r\n    /** 统计文本的样式 */\r\n    readonly style?: CSSStyle | ((datum: Datum) => CSSStyle);\r\n    /** 文本内容 */\r\n    readonly content?: string;\r\n    /** 文本的格式化 */\r\n    readonly formatter?: (datum?: Datum, data?: Data /** filterData */) => string;\r\n    /** 自定义中心文本的 html */\r\n    readonly customHtml?: (container: HTMLElement, view: View, datum?: Datum, data?: Data /** filterData */) => string;\r\n    readonly rotate?: number;\r\n    readonly offsetX?: number;\r\n    readonly offsetY?: number;\r\n};\r\n\r\nexport declare class Stock extends Plot<StockOptions> {\r\n    /**\r\n     * 获取 散点图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<StockOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 默认配置\r\n     *  g2/g2plot默 认 配 置 -->  图 表 默 认 配 置  --> 开 发 者 自 定 义 配 置  --> 最 终 绘 图 配 置\r\n     */\r\n    protected getDefaultOptions(): Partial<StockOptions>;\r\n    /**\r\n     * 获取 蜡烛图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<StockOptions>;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: StockOptions['data']): void;\r\n}\r\n\r\nexport declare interface StockOptions extends Options {\r\n    /** x 轴字段  日期*/\r\n    readonly xField: string;\r\n    /** y 轴映射 range  【开盘价/收盘价/最高价/最低价】\r\n     * 设置一个指定 [open, close, high, low]【开盘价/收盘价/最高价/最低价】字段的数组 */\r\n    readonly yField: [string, string, string, string];\r\n    /** 颜色配置, 不支持 color 配置 */\r\n    /** 上涨色 */\r\n    readonly risingFill?: string;\r\n    /** 下跌色 */\r\n    readonly fallingFill?: string;\r\n    /** 样式配置 */\r\n    readonly stockStyle?: StyleAttr;\r\n}\r\n\r\n/** 图形样式 style 映射 */\r\nexport declare type StyleAttr = ShapeStyle | ((datum: Datum) => ShapeStyle);\r\n\r\nexport declare class Sunburst extends Plot<SunburstOptions> {\r\n    /**\r\n     * 获取 旭日图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<SunburstOptions>;\r\n    /** 旭日图 节点的祖先节点 */\r\n    static SUNBURST_ANCESTOR_FIELD: string;\r\n    /** 旭日图 节点的路径 */\r\n    static SUNBURST_PATH_FIELD: string;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 旭日图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<SunburstOptions>;\r\n    /**\r\n     * 获取旭日图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<SunburstOptions>;\r\n}\r\n\r\nexport declare interface SunburstOptions extends Omit<Options, 'data' | 'legend' | 'slider' | 'scrollbar' | 'xAxis' | 'yAxis'> {\r\n    /** 旭日图数据 */\r\n    readonly data: any;\r\n    /** 径向类型 */\r\n    readonly reflect?: 'x' | 'y';\r\n    /** 内径 */\r\n    readonly innerRadius?: number;\r\n    /** 半经 */\r\n    readonly radius?: number;\r\n    /** 颜色映射 */\r\n    readonly colorField?: string;\r\n    /** 颜色*/\r\n    readonly color?: ColorAttr;\r\n    /** 旭日图形样式 */\r\n    readonly sunburstStyle?: StyleAttr;\r\n    /** 层级布局配置 */\r\n    readonly hierarchyConfig?: Omit<HierarchyOption, 'as' | 'type'> & {\r\n        /** default: 'value', required data to be like: { name: 'xx', [field]: 12, children: [] } */\r\n        field?: string;\r\n    };\r\n    /** 额外的原始字段 */\r\n    readonly rawFields?: string[];\r\n    /** 下钻交互 */\r\n    readonly drilldown?: DrillDownCfg;\r\n}\r\n\r\ndeclare type Tag = Word & {\r\n    /** 字体 */\r\n    font?: string;\r\n    /** 字体样式 */\r\n    style?: ShapeStyle['fontStyle'];\r\n    /** 文本粗细 */\r\n    weight?: FontWeight;\r\n    /** 旋转角度 */\r\n    rotate?: number;\r\n    /** 字体大小 */\r\n    size?: number;\r\n    /** 一个单词所占的盒子的内边距，值越大单词之间的间隔越大 */\r\n    padding?: number;\r\n    /** 是否包含文本 */\r\n    hasText?: boolean;\r\n    /** 单词所占盒子的宽度 */\r\n    width?: number;\r\n    /** 单词所占盒子的高度 */\r\n    height?: number;\r\n    /** x 轴坐标 */\r\n    x?: number;\r\n    /** y 轴坐标 */\r\n    y?: number;\r\n};\r\n\r\nexport declare type TextOption = Types.TextOption;\r\n\r\n/** 文字 */\r\nexport declare type TextStyle = {\r\n    /** 文本大小 */\r\n    readonly fontSize?: number;\r\n    /** 字体系列 */\r\n    readonly fontFamily?: string;\r\n    /** 文本粗细 */\r\n    readonly fontWeight?: number;\r\n    /** 文本行高 */\r\n    readonly lineHeight?: number;\r\n    /** 文本对齐方式 */\r\n    readonly textAlign?: 'center' | 'left' | 'right';\r\n    /** 文本基线 */\r\n    readonly textBaseline?: 'middle' | 'top' | 'bottom';\r\n};\r\n\r\n/**\r\n * 设置全局主题配置\r\n * @param params\r\n */\r\ndeclare function theme<O extends Pick<Options, 'theme'>>(params: Params<O>): Params<O>;\r\n\r\nexport declare class TinyArea extends Plot<TinyAreaOptions> {\r\n    /**\r\n     * 获取默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<TinyAreaOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: TinyAreaOptions['data']): void;\r\n    protected getDefaultOptions(): Partial<TinyAreaOptions>;\r\n    /**\r\n     * 获取 迷你面积图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<TinyAreaOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface TinyAreaOptions extends Omit<Options, 'data' | 'legend' | 'label'> {\r\n    /** 具体的数据 */\r\n    readonly data: number[];\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 面积折线图形样式 */\r\n    readonly areaStyle?: StyleAttr;\r\n    /** 面积折线图形样式 */\r\n    readonly line?: MappingOptions;\r\n    /** 面积点图形样式 */\r\n    readonly point?: MappingOptions & Pick<PointGeometryOptions, 'state'>;\r\n}\r\n\r\nexport declare class TinyColumn extends Plot<TinyColumnOptions> {\r\n    /**\r\n     * 获取默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<TinyColumnOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: TinyColumnOptions['data']): void;\r\n    protected getDefaultOptions(): Partial<TinyColumnOptions>;\r\n    /**\r\n     * 获取 迷你柱形图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<TinyColumnOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface TinyColumnOptions extends Omit<Options, 'data' | 'legend' | 'label'> {\r\n    /** 具体的数据 */\r\n    readonly data: number[];\r\n    /** 柱状图宽度占比 [0-1] */\r\n    readonly columnWidthRatio?: number;\r\n    /** 迷你柱形图形样式 */\r\n    readonly columnStyle?: StyleAttr;\r\n}\r\n\r\nexport declare class TinyLine extends Plot<TinyLineOptions> {\r\n    /**\r\n     * 获取默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<TinyLineOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: TinyLineOptions['data']): void;\r\n    protected getDefaultOptions(): Partial<TinyLineOptions>;\r\n    /**\r\n     * 获取 迷你折线图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<TinyLineOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface TinyLineOptions extends Omit<Options, 'data' | 'legend' | 'label'> {\r\n    /** 具体的数据 */\r\n    readonly data: number[];\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 是否连接空数据 */\r\n    readonly connectNulls?: boolean;\r\n    /** 折线图形样式 */\r\n    readonly lineStyle?: StyleAttr;\r\n    /** 折线点图形样式 */\r\n    readonly point?: MappingOptions & Pick<PointGeometryOptions, 'state'>;\r\n}\r\n\r\nexport declare type Tooltip = false | TooltipOptions;\r\n\r\n/**\r\n * 通用 tooltip 配置\r\n * @param params\r\n */\r\ndeclare function tooltip<O extends Pick<Options, 'tooltip'>>(params: Params<O>): Params<O>;\r\n\r\n/** tooltip 的回调 */\r\nexport declare type TooltipAttr = (datum: Datum) => {\r\n    name: string;\r\n    value: string | number;\r\n};\r\n\r\nexport declare type TooltipMapping = {\r\n    /** 指定需要显示 tooltip 中的字段，默认是包含 x seriesFields y  */\r\n    readonly fields?: string[] | false;\r\n    /** value 格式化 **/\r\n    readonly formatter?: TooltipAttr;\r\n};\r\n\r\nexport declare type TooltipOptions = Types.TooltipCfg & TooltipMapping;\r\n\r\n/** totalCfg of waterfall */\r\ndeclare type TotalCfg = {\r\n    /** 总计的标签 */\r\n    label?: string;\r\n    style?: ShapeStyle;\r\n};\r\n\r\nexport declare class Treemap extends Plot<TreemapOptions> {\r\n    /**\r\n     * 获取 矩阵树图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<TreemapOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * changeData\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 获取 矩阵树图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<TreemapOptions>;\r\n    protected getSchemaAdaptor(): Adaptor<TreemapOptions>;\r\n}\r\n\r\nexport declare interface TreemapOptions extends Omit<Options, 'data'> {\r\n    /** 颜色字段 */\r\n    readonly colorField?: string;\r\n    /** 数据字段 */\r\n    readonly data?: Record<string, any>;\r\n    /** 图形样式 */\r\n    readonly rectStyle?: StyleAttr;\r\n    /** 层级布局配置 */\r\n    readonly hierarchyConfig?: Omit<HierarchyOption, 'as' | 'type' | 'field'>;\r\n    /** 下钻交互相关配置 */\r\n    readonly drilldown?: DrillDownCfg;\r\n}\r\n\r\nexport declare const version = \"2.3.23\";\r\n\r\nexport declare class Violin extends Plot<ViolinOptions> {\r\n    /**\r\n     * 获取 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<ViolinOptions>;\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     */\r\n    changeData(data: ViolinOptions['data']): void;\r\n    /**\r\n     * 获取 小提琴图 默认配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<ViolinOptions>;\r\n    /**\r\n     * 获取 小提琴图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<ViolinOptions>;\r\n}\r\n\r\nexport declare interface ViolinOptions extends Options {\r\n    /** X 轴映射 */\r\n    readonly xField: string;\r\n    /** Y 轴映射 */\r\n    readonly yField: string;\r\n    /** 拆分字段映射，默认是分组情况，颜色作为视觉通道 */\r\n    readonly seriesField?: string;\r\n    /** 内部箱线图配置，false 为不显示。 */\r\n    readonly box?: boolean;\r\n    /**\r\n     * 小提琴的形状。\r\n     * 默认: 非平滑、实心\r\n     * smooth: 平滑\r\n     * hollow: 空心\r\n     * hollow-smooth: 平滑、空心\r\n     */\r\n    readonly shape?: 'smooth' | 'hollow' | 'hollow-smooth';\r\n    /** 小提琴样式配置，可选 */\r\n    readonly violinStyle?: StyleAttr;\r\n    /** 核函数配置，当前只支持三角核 */\r\n    readonly kde?: {\r\n        /** 三角波类型 */\r\n        type: 'triangular';\r\n        /** 最小值，默认为数据中的最小值减去一个固定的阈值。 */\r\n        min?: number;\r\n        /** 最大值，默认为数据中的最大值加上一个固定的阈值。 */\r\n        max?: number;\r\n        /** 采样数量，越大轮廓线越接近真实概率分布函数，默认32。 */\r\n        sampleSize?: number;\r\n        /** 核函数的带宽。带宽越大产生的曲线越平滑（越模糊），带宽越小产生的曲线越陡峭。默认3。 */\r\n        width?: number;\r\n    };\r\n}\r\n\r\n/**\r\n * 瀑布图\r\n */\r\nexport declare class Waterfall extends Plot<WaterfallOptions> {\r\n    /**\r\n     * 获取 瀑布图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<WaterfallOptions>;\r\n    /** 图表类型 */\r\n    readonly type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 获取 瀑布图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<WaterfallOptions>;\r\n    /**\r\n     * 获取 瀑布图 的默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<WaterfallOptions>;\r\n}\r\n\r\nexport declare interface WaterfallOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴字段 */\r\n    readonly yField: string;\r\n    /** label 数据模式, default: difference */\r\n    readonly labelMode?: 'absolute' | 'difference';\r\n    /** 是否展示 总计 */\r\n    readonly total?: false | TotalCfg;\r\n    /** 是否展示 柱子间牵引线 */\r\n    readonly leaderLine?: false | LeaderLineCfg;\r\n    /** 上涨色 */\r\n    readonly risingFill?: string;\r\n    /** 下跌色 */\r\n    readonly fallingFill?: string;\r\n    /** 柱子样式配置; 注意: fill 不再生效，直接使用 risingFill, fallingFill 或 color */\r\n    readonly waterfallStyle?: StyleAttr;\r\n    /** 柱状图宽度占比 [0-1] */\r\n    readonly columnWidthRatio?: number;\r\n}\r\n\r\ndeclare type Wave = Partial<{\r\n    /** 波形的数量，默认为 3 */\r\n    readonly count: number;\r\n    /** 波形的长度，默认是 192 */\r\n    readonly length: number;\r\n}>;\r\n\r\n/** 一个文本信息，wordCloud 内部 */\r\ndeclare interface Word {\r\n    /** 文本内容 */\r\n    text: string;\r\n    /** 该文本所占权重 */\r\n    value: number;\r\n    /** 用于指定颜色字段 */\r\n    color: string | number;\r\n    /** 原始数据 */\r\n    datum: Datum;\r\n}\r\n\r\nexport declare class WordCloud extends Plot<WordCloudOptions> {\r\n    /**\r\n     * 获取 词云图 默认配置项\r\n     * 供外部使用\r\n     */\r\n    static getDefaultOptions(): Partial<WordCloudOptions>;\r\n    /** 词云图 */\r\n    type: string;\r\n    /**\r\n     * @override\r\n     * @param data\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 获取默认的 options 配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<WordCloudOptions>;\r\n    /**\r\n     * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\r\n     */\r\n    render(): Promise<void>;\r\n    /**\r\n     * 获取 词云图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<WordCloudOptions>;\r\n    /**\r\n     * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\r\n     */\r\n    protected triggerResize(): void;\r\n}\r\n\r\nexport declare interface WordCloudOptions extends Options {\r\n    /** 词条内容字段 */\r\n    readonly wordField: string;\r\n    /** 词条权重字段 */\r\n    readonly weightField: string;\r\n    /** 根据该字段进行颜色映射 */\r\n    readonly colorField?: string;\r\n    /** 遮罩图片实例，可以是图片 URL 或者 base64 */\r\n    readonly imageMask?: HTMLImageElement | string;\r\n    /** 最大执行时间 */\r\n    readonly timeInterval?: number;\r\n    /**\r\n     * 自定义所使用的随机函数，其值可以是一个 [0, 1) 区间中的值，\r\n     * 也可以是一个返回该值的函数，当该值是一个固定的值时，每次渲染\r\n     * 相同数据的词云图时，其对应的每个单词的布局坐标一致。\r\n     *\r\n     * 默认使用的是浏览器内置的 Math.random，也就是每次渲染，单词的位置都不一样。\r\n     */\r\n    readonly random?: number | (() => number);\r\n    /**\r\n     * 1，当设置为 `archimedean` 时，整个词云图接近于`椭圆`的形状。\r\n     * 2，当设置为 `rectangular` 时，整个词云图接近于`矩形`的形状。\r\n     * 默认是 `archimedean`。\r\n     */\r\n    readonly spiral?: 'archimedean' | 'rectangular';\r\n    /**\r\n     * 自定义每个词语的坐标。\r\n     * 返回值必须包含 x 和 y 属性，其余的可选。也可以在 `wordStyle` 中的\r\n     * 选项中设置。\r\n     */\r\n    readonly placementStrategy?: (word: Word, index?: number, words?: Word[]) => Partial<Tag> & {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    readonly wordStyle?: WordStyle;\r\n}\r\n\r\n/** 词云字体样式 */\r\ndeclare interface WordStyle {\r\n    /** 词云的字体, 当为函数时，其参数是一个经过处理之后的数据元素的值 */\r\n    readonly fontFamily?: string | ((word: Word, index?: number, words?: Word[]) => string);\r\n    /** 设置字体的粗细, 当为函数时，其参数是一个经过处理之后的数据元素的值 */\r\n    readonly fontWeight?: FontWeight | ((word: Word, index?: number, words?: Word[]) => FontWeight);\r\n    /**\r\n     * 每个单词所占的盒子的内边距，默认为 1。 越大单词之间的间隔越大。\r\n     * 当为函数时，其参数是一个经过处理之后的数据元素的值\r\n     */\r\n    readonly padding?: number | ((word: Word, index?: number, words?: Word[]) => number);\r\n    /** 字体的大小范围,当为函数时，其参数是一个经过处理之后的数据元素的值 */\r\n    readonly fontSize?: [number, number] | number | ((word: Word, index?: number, words?: Word[]) => number);\r\n    /**\r\n     * 旋转的最小角度和最大角度 默认 [0, 90]。\r\n     *\r\n     * 注意：如果值是 number 或者 function ，则\r\n     * `rotationSteps` 选项将失效。\r\n     */\r\n    readonly rotation?: [number, number] | number | ((word: Word, index?: number, words?: Word[]) => number);\r\n    /**\r\n     * 旋转实际的步数,越大可能旋转角度越小, 默认是 2。\r\n     *\r\n     * 例如：如果 `rotation` 的值是 [0, 90]，`rotationSteps` 的值是 3，\r\n     * 则最终可能旋转的角度有三种，分别是 0 度、45度和 90 度。\r\n     */\r\n    readonly rotationSteps?: number;\r\n}\r\n\r\nexport { }\r\n\n        }"}}}}